
@using Microsoft.AspNetCore.Components.Web
@using TriangleProject.Shared.Models.Editor
@using TriangleProject.Shared.Models.Matches
@using TriangleProject.Shared.Models.Portelem
@using TriangleProject.Client.Components

@inject HttpClient Http
@inject NavigationManager nav
@inject NavigationManager Nav


<div class="game-card">
    <div class="title">@GameFullName</div>
    <div class="content">
        <input type="button" value="Update" @onclick="updateNavigate" />
        <div>@gameCode</div>

        <input type="text" gameStatus="סטטוס פרסום" />
        <div>
            @if (GamePublishStatus == "Not Eligible")
            {
                <input type="checkbox" disabled />
                @*<input type="button" value="Delete"  />*@
                @*<span><img src="/trash3.svg" alt="Icon" @onclick="(() =>DeleteGame(game))" /> </span>*@

            }
            else if (GamePublishStatus == "Eligible")
            {
                <input type="checkbox" @onchange="changePublish" />
            }
            else
            {
                <input type="checkbox" checked @onchange="changePublish" />
            }
        </div>
        <div class="delete-button-container">
            <button class="delete-button" @onclick="deleteGame">Delete</button>

        </div>
    </div>
</div>

@code {

    [CascadingParameter]
    public int UserId { get; set; }


    public class showMsgInfo
    {
        public bool MsgStatus { get; set; }
        public string GameName { get; set; }
    }

    @*showMsgInfo showMsg = new showMsgInfo();*@

    [Parameter]
    public GameForEditor gameToPublish { get; set; }

    [Parameter]
    public string GameFullName { get; set; }

    [Parameter]
    public string GamePublishStatus { get; set; }

    [Parameter]
    public int gameCode { get; set; }

    [Parameter]
    public bool isClicked { get; set; }

    [Parameter]
    public EventCallback<string> GamePublish { get; set; }
    [Parameter]
    public EventCallback<bool> isCheckboxClicked { get; set; }
    [Parameter]
    public EventCallback<bool> showMsg { get; set; }

    void changePublish()
    {

        isCheckboxClicked.InvokeAsync(true);
    }

    void deleteGame()
    {

        showMsg.InvokeAsync(true);
    }



    void updateNavigate()
    {
        nav.NavigateTo("./EditGamePage/" + GameFullName + "/" + UserId);
    }


}




<style>
    .game-card {
        width: 100%;
        max-width: 254px;
        height: auto;
        border-radius: 10px;
        box-shadow: 0 2px 5px rgba(0, 0, 0, 0.2);
        background-color: white;
        padding: 10px;
    }

    .title {
        background-color: #d0e6f5;
        text-align: center;
        padding: 5px 0;
        border-top-left-radius: 10px;
        border-top-right-radius: 10px;
    }

    .content {
        margin-top: 10px;
    }

    .toggle-button {
        margin-top: 10px;
        width: 100%;
    }

    .delete-button-container {
        text-align: center;
        margin-top: 10px;
    }

    .delete-button {
        /* Add your styling for the delete button here */
    }
</style>

