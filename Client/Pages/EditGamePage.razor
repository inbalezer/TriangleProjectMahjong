@page "/EditGamePage/{GameFullName}/{newGameID:int}"
@using TriangleProject.Shared.Models.Editor
@using TriangleProject.Shared.Models.Matches
@using TriangleProject.Shared.Models.Portelem
@using TriangleProject.Client.Components
@using System.ComponentModel.DataAnnotations;

@inject HttpClient Http
@inject NavigationManager Nav
@inject NavigationManager nav


<h3>EditGamePage</h3>
<button style="background-color:pink" @onclick="showMessage">חזור</button>


<table style="border:double">
    <tr>
        <th>"הגדרות כלליות"</th>
    </tr>
    <tr>
        :שם המשחק
        <input style="border:2px solid blue" type="text" @bind="GameFullName" />
    </tr>
    <tr>
        :הנחיית משחק לחצו והתאימו בין
        <input style="border:2px solid blue" type="text" @bind="GameInstruction" /> ורוקנו את הלוח
    </tr>


</table>

@*<input type="button" value="שמור" @onclick=Navigate />*@

<MudButton value="שמור" @onclick="(() => updateNameAndInstruction(gameWithInstruction))" Color="Color.Primary"> +שמור </MudButton>



<p>הוספת זוגות</p>



<EditForm Model="currentMatchToShow" OnValidSubmit="(() =>AddMatch(currentMatchToShow))">
    <DataAnnotationsValidator />

    <p>:התאמה ראשונה</p>
    <InputCheckbox style="background-color:aquamarine" @bind-Value="textChanged" />

    @if (!textChanged)
    {
        @if (editMatch.ID == 0)
        {
            currentMatchToShow = newMatch;
        }
        currentMatchToShow.FirstIsText = true;

        if (currentMatchToShow.FirstMatch == "")
        {
            currentValue = currentMatchToShow.FirstMatch;

            if (currentMatchToShow.FirstMatch != null)
            {
                if (currentMatchToShow.FirstMatch.Contains("uploadedFiles/"))
                {
                    currentMatchToShow.FirstMatch = "";
                    Console.WriteLine("empty");

                }
                else
                {
                    currentMatchToShow.FirstMatch = currentValue;

                }
            }

        }
        <input style="border:2px solid blue" type="text" @bind="currentMatchToShow.FirstMatch" />

    }
    else
    {
        currentMatchToShow.FirstIsText = false;
        if (myFileImage1 != "")
        {
            currentMatchToShow.FirstMatch = myFileImage1;
        }

        <label for="FileInֵputID"> העלה תמונה</label>
        <InputFile id="FileInputID" OnChange="((e) => UploadFile(e, true))" style=""></InputFile>
        <br />
        @if (myFileImage1 != "")
        {
            <img src="@myFileImage1" width="150" />
            @*<input type="button" value="העבר למחיקה " @onclick="MakeDeleteList" />*@
        }
    }

    <p>:התאמה שניה</p>
    <InputCheckbox style="background-color:aquamarine" @bind-Value="text2Changed" />

    @if (!text2Changed)
    {
        @if (editMatch.ID == 0)
        {
            currentMatchToShow = newMatch;
        }

        currentMatchToShow.SecondIsText = false;
        if (myFileImage2 != "")
        {
            currentMatchToShow.SecondMatch = myFileImage2;

        }
        <label for="FileInֵputID"> העלה תמונה</label>
        <InputFile id="FileInputID" OnChange="((e) => UploadFile(e, false))"></InputFile>
        <br />
        @if (myFileImage2 != "")
        {
            <img src="@myFileImage2" width="150" />
            @*<input type="button" value="העבר למחיקה " @onclick="MakeDeleteList" />*@
        }

    }
    else
    {
        currentValue2 = newMatch.SecondMatch;
        currentMatchToShow.SecondIsText = true;

        if (currentMatchToShow.SecondMatch == "")
        {
            if (currentValue2 != null)
            {
                if (!currentValue2.Contains("uploadedFiles/"))
                {
                    newMatch.SecondMatch = currentValue2;
                    Console.WriteLine(newMatch.SecondMatch + "im in the stupid else");

                }
                else

                {
                    newMatch.SecondMatch = "";
                    Console.WriteLine("empty");

                }

            }

        }
        <input style="border:2px solid blue" type="text" @bind="currentMatchToShow.SecondMatch" />

    }

    @if (editAvailable)
    {
        <input type="button" value="בטל עריכה" style="background-color: peru" @onclick="@(async ()=> await EditMatchRow(currentMatchToShow.ID))" />
    }
    <br />
    <input type="submit" value="שמור זוג" />


</EditForm>


<div>
    @if (fullGame.MatchesList != null)
    {
        @foreach (MatchToShow match in fullGame.MatchesList)
        {

            <MatchComp matchText="@match.FirstMatch" matchText2="@match.SecondMatch" uploadedImg="" uploadedImg2="" DeleteCallBack="@(async () => await DeleteMatchRow(match))" EditMatchCallBack="@(async ()=> await EditMatchRow(match.ID))"></MatchComp>


        }
    }
</div>


@if (msg != "")
{
    <p>@msg</p>
    <input type="button" value="reload" @onclick=Navigate />
}

@if (myFileImage != "")
{
    <img src="@myFileImage" width="150" />
    <input type="button" value="העבר למחיקה " @onclick="MakeDeleteList" />
}


@if (DeletedImages.Count > 0)
{
    <ul>
        @foreach (string img in DeletedImages)
        {

            <li>@img     <img src="@img" width="50" /> </li>
        }
    </ul>

    <input type="button" value="מחק תמונות נבחרות " @onclick="DeleteImage" />
}

@if (SettingMsg != "")
{
    <p>@SettingMsg</p>
}


}
<p>@msg</p>

@if (fullGameMsg != "")
{
    <p>@fullGameMsg</p>
}
@if (isReturnClicked)
{
    <PopupComp Headline="@returnHeadLinePopUp" Text1="@returnTextPopUp1" GameIdToDelete="@(async () => await returnToHome())" ShowMsg="closedReturnPopUp" actionButtonText="שמור וחזור ל״משחקים שלי״ " cancelButtonText="בטל"></PopupComp>

}

<div style="background-color: white; width: 30%; box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2); border-radius: 5px;">

    <p>
        שם והנחיית המשחק
    </p>
    @if (isNameAndInstraction)
    {
        <p>--יש שם והוראה--</p>
    }
    <p>
        מינימום 5 זוגות
    </p>
    @if (isEnoughMathces)
    {
        <p>---יש 5 זוגות ומעלה---</p>
    }
</div>

@code {

    [CascadingParameter]
    public int UserId { get; set; }

    [Parameter]
    public string GameFullName { get; set; }

    [Parameter]
    public int newGameID { get; set; }

    [Parameter]
    public bool updateMode { get; set; }

    string msg = "";
    string SettingMsg = "";
    string fullGameMsg = "";
    string returnHeadLinePopUp = "חזור למסך ״המשחקים שלי?";
    string returnTextPopUp1 = "אתה עומד לחזור למסך ״המשחקים שלי״.\nאם קיים זוג חדש שטרם שמרת, הוא לא ישמר. ";
    string gameNameToReturn = "";
    string myFileImage = "";
    string myFileImage1 = "";
    string myFileImage2 = "";
    string GameInstruction = "";
    string currentValue = "";
    string currentValue2 = "";

    @*string msg = "";*@
    bool FirstIsText;
    bool SecondIsText;
    bool isReturnClicked = false;
    bool textChanged = false;
    bool text2Changed = false;
    bool showImg = false;
    bool editAvailable = false;
    long maxFileSize = 4194304;


    //MatchToUpdate newMatch;
    //GameToUpdate gameToReturn1;
    //List<MatchToUpdate> allMatches;
    //List<MatchToUpdate> allMatches = new List<MatchToUpdate>();


    MatchToUpdate newMatch = new MatchToUpdate();
    MatchToUpdate currentMatchToShow = new MatchToUpdate();
    MatchToShow updatedMatchToShow = new MatchToShow();
    MatchToEdit editMatch = new MatchToEdit();
    gameInsrtuctionToInsert gameWithInstruction = new gameInsrtuctionToInsert();
    GameToShow fullGame = new GameToShow();
    GameForEditor game1;
    bool isEnoughMathces = false;
    bool isNameAndInstraction = false;




    void AreConditionsMet()
    {
        if (fullGame.MatchesList.Count >= 5)
        {

            isEnoughMathces = true;
        }
        else
        {
            isEnoughMathces = false;
        }
        if (GameInstruction.Length > 0 && GameFullName.Length > 0)
        {

            isNameAndInstraction = true;
        }
        else
        {
            isNameAndInstraction = false;
        }


    }

    void Navigate()
    {
        Nav.NavigateTo("./", true);
    }

    void closedReturnPopUp()
    {
        isReturnClicked = false;
    }

    void showMessage()
    {
        isReturnClicked = true;
    }



    protected async Task AddMatch(MatchToUpdate newMatchForIdentify)
    {


        if (editMatch.ID > 0) // EDIT MATCH
        {
            newMatchForIdentify.GameID = newGameID;

            var UpdatedMatch = await Http.PostAsJsonAsync("api/Matches/" + UserId + "/EditMatch", newMatchForIdentify);

            if (UpdatedMatch.IsSuccessStatusCode)
            {
                MatchToUpdate match1 = UpdatedMatch.Content.ReadFromJsonAsync<MatchToUpdate>().Result;

                editMatch.FirstMatch = match1.FirstMatch;
                editMatch.SecondMatch = match1.SecondMatch;

                foreach (MatchToShow updatedMatch1 in fullGame.MatchesList)
                {
                    if (updatedMatch1.ID == editMatch.ID)
                    {
                        int index = fullGame.MatchesList.IndexOf(updatedMatch1);
                        fullGame.MatchesList[index].ID = editMatch.ID;
                        fullGame.MatchesList[index].FirstMatch = editMatch.FirstMatch;
                        fullGame.MatchesList[index].SecondMatch = editMatch.SecondMatch;

                    }
                }

                currentMatchToShow = new MatchToUpdate();
                editMatch = new MatchToEdit();
                newMatch = new MatchToUpdate();
                myFileImage1 = "";
                myFileImage2 = "";
                AreConditionsMet();

            }
            else
            {
                string error = UpdatedMatch.Content.ReadAsStringAsync().Result;

                switch (error)
                {
                    case "No Session":
                        msg = "Session error, please reload page";
                        break;

                    case "User Not Logged In":
                        msg = "You are not logged in, please reload page to try again";
                        break;

                    case "update match faild":
                        msg = "update match faild";
                        break;
                }
            }
        }
        else // NEW MATCH
        {
            newMatchForIdentify.GameID = newGameID;

            var AddMatch = await Http.PostAsJsonAsync("api/Matches/" + UserId + "/AddMatch", newMatchForIdentify);

            if (AddMatch.IsSuccessStatusCode)
            {
                MatchToShow match1 = AddMatch.Content.ReadFromJsonAsync<MatchToShow>().Result;
                fullGame.MatchesList.Add(match1);
                currentMatchToShow = new MatchToUpdate();
                newMatch = new MatchToUpdate();
                myFileImage1 = "";
                myFileImage2 = "";
                AreConditionsMet();

            }

            else
            {
                string error = AddMatch.Content.ReadAsStringAsync().Result;

                switch (error)
                {
                    case "No Session":
                        msg = "Session error, please reload page";
                        break;

                    case "User Not Logged In":
                        msg = "You are not logged in, please reload page to try again";
                        break;

                    case "User Not Found":
                        msg = "You tried to update a game that is not associated with your user ";
                        break;

                    case "Game not created":
                        msg = "The game you have tried to create, faild.";
                        break;
                }
            }
        }


    }


    protected override async Task OnInitializedAsync()
    {

        var ShowGameRes = await Http.GetAsync("api/Games/" + UserId + "/FullGameToEdit/" + newGameID);

        if (ShowGameRes.IsSuccessStatusCode)
        {

            fullGame = ShowGameRes.Content.ReadFromJsonAsync<GameToShow>().Result;
            GameInstruction = fullGame.GameInstruction;
            Console.WriteLine(fullGame.GameInstruction);
            AreConditionsMet();
        }
        else
        {
            string error = ShowGameRes.Content.ReadAsStringAsync().Result;

            switch (error)
            {
                case "No Session":
                    msg = "Session error, please reload page";
                    break;

                case "User Not Logged In":
                    msg = "You are not logged in, please reload page to try again";
                    break;

                case "Game not found":
                    msg = "Game not found ";
                    break;
            }
        }
    }


    private async Task UploadFile(InputFileChangeEventArgs e, bool isFirstImg)
    {
        var imageFiles = e.GetMultipleFiles();
        foreach (var file in imageFiles)
        {
            if (file.Size <= maxFileSize)
            {
                var buffer = new byte[file.Size];
                await file.OpenReadStream(maxFileSize).ReadAsync(buffer);
                var imageBase64 = Convert.ToBase64String(buffer);
                var saveResponse = await Http.PostAsJsonAsync("api/Media/upload", imageBase64);

                if (saveResponse.IsSuccessStatusCode)
                {
                    string resizeUrl = saveResponse.Content.ReadAsStringAsync().Result;

                    if (isFirstImg)
                    {
                        myFileImage1 = "uploadedFiles/" + resizeUrl;
                    }
                    else
                    {
                        myFileImage2 = "uploadedFiles/" + resizeUrl;

                    }
                    @*myFileImage = "uploadedFiles/" + resizeUrl;*@
                }
            }
            else
            {
                msg = "לא ניתן להעלות את התמונה- היא גדולה מדיי";
            }
        }
    }

    List<string> DeletedImages = new List<string>();

    private void MakeDeleteList() // הוספת שם התמונה לרשימת התמונות הכוללת המועמדת למחיקה- לא מחיקה בפועל מהדאטה בייס
    {
        DeletedImages.Add(myFileImage);
        myFileImage = "";
    }

    private async Task DeleteImage()
    {
        var saveResponse = await Http.PostAsJsonAsync("api/Media/deleteImages", DeletedImages);

        if (saveResponse.IsSuccessStatusCode == true)
        {
            msg = "התמונות נמחקו בהצלחה";
            DeletedImages.Clear();
        }
        else
        {
            msg = "בעיה במחיקה ";
        }
    }


    protected async Task updateNameAndInstruction(gameInsrtuctionToInsert gameInsrtucToInsert)
    {
        gameInsrtucToInsert.ID = newGameID;
        gameInsrtucToInsert.GameFullName = GameFullName;
        gameInsrtucToInsert.GameInstruction = GameInstruction;

        var userRes = await Http.PostAsJsonAsync("api/Matches/" + UserId + "/addInstruction", gameInsrtucToInsert);

        if (userRes.IsSuccessStatusCode)
        {
            //משתנה שיפעיל אנימציה של וי
            SettingMsg = "קולולולו";
            AreConditionsMet();
        }

        else
        {
            string error = userRes.Content.ReadAsStringAsync().Result;

            switch (error)
            {
                case "No Session":
                    SettingMsg = "Session error, please reload page";
                    break;

                case "User Not Logged In":
                    SettingMsg = "You are not logged in, please reload page to try again";
                    break;

                case "It's Not Your Game":
                    SettingMsg = "You tried to update a game that is not associated with your user ";
                    break;

                case "update Game Instruction failed":
                    SettingMsg = " update Game Instruction failed";
                    break;

                case "update game name failed":
                    SettingMsg = " update game name failed";
                    break;
            }
        }
    }

    protected async Task DeleteMatchRow(MatchToShow matchToDelete)
    {

        var deleteMatchResponse = await Http.DeleteAsync("api/Matches/" + UserId + "/DeleteMatch" + "/" + matchToDelete.ID);
        if (deleteMatchResponse.IsSuccessStatusCode)
        {
            fullGame.MatchesList.Remove(matchToDelete);
            AreConditionsMet();
        }

        else
        {
            string error = deleteMatchResponse.Content.ReadAsStringAsync().Result;

            switch (error)
            {
                case "No Session":
                    msg = "Session error, please reload page";
                    break;

                case "User Not Logged In":
                    msg = "You are not logged in, please reload page to try again";
                    break;

                case "Failed to delete match":
                    msg = "Failed to delete match";
                    break;
            }
        }
    }

    protected async Task EditMatchRow(int matchIdToEdit)
    {
        editAvailable = true;

        var editMatchResponse = await Http.GetAsync("api/Matches/" + UserId + "/TempEdit" + "/" + matchIdToEdit);
        if (editMatchResponse.IsSuccessStatusCode)
        {
            editMatch = editMatchResponse.Content.ReadFromJsonAsync<MatchToEdit>().Result;
            currentMatchToShow.ID = editMatch.ID;
            currentMatchToShow.FirstMatch = editMatch.FirstMatch;
            currentMatchToShow.FirstIsText = editMatch.FirstIsText;
            currentMatchToShow.SecondMatch = editMatch.SecondMatch;
            currentMatchToShow.SecondIsText = editMatch.SecondIsText;
            if (!editMatch.FirstIsText)
            {
                textChanged = true;
                myFileImage1 = currentMatchToShow.FirstMatch;

            }
            else
            {
                textChanged = false;
            }

            if (!editMatch.SecondIsText)
            {
                text2Changed = false;
                myFileImage2 = currentMatchToShow.SecondMatch;

            }
            else
            {
                text2Changed = true;
            }
            //textChanged = editMatch.FirstIsText;
            //text2Changed = !editMatch.SecondIsText;
        }

        else
        {
            string error = editMatchResponse.Content.ReadAsStringAsync().Result;

            switch (error)
            {
                case "No Session":
                    msg = "Session error, please reload page";
                    break;

                case "User Not Logged In":
                    msg = "You are not logged in, please reload page to try again";
                    break;

                case "Pulling match Failed":
                    msg = "Failed to pull match";
                    break;
            }
        }
    }

    protected async Task returnToHome()
    {
        GameToUpdate gameToReturn1 = new GameToUpdate();
        gameToReturn1.ID = fullGame.ID;
        gameToReturn1.GameFullName = GameFullName;
        gameToReturn1.PublishStatus = fullGame.PublishStatus;
        gameToReturn1.GameInstruction = GameInstruction;


        var userResRETURN = await Http.PostAsJsonAsync("api/Games/" + UserId + "/EditGame", gameToReturn1);

        if (userResRETURN.IsSuccessStatusCode)
        {
            //משתנה שיפעיל אנימציה של וי
            SettingMsg = "dfklmhdgjnfgsdlkf";
            nav.NavigateTo("./GamesList/");

        }

        else
        {
            string error = userResRETURN.Content.ReadAsStringAsync().Result;

            switch (error)
            {
                case "No Session":
                    SettingMsg = "Session error, please reload page";
                    break;

                case "User Not Logged In":
                    SettingMsg = "You are not logged in, please reload page to try again";
                    break;

                case "update game faild":
                    SettingMsg = "You tried to update a game that is not associated with your user ";
                    break;


            }
        }
    }


}

