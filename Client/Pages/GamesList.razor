@page "/GamesList"
@using TriangleProject.Shared.Models.Editor
@using TriangleProject.Shared.Models.Matches
@using TriangleProject.Shared.Models.Portelem
@using TriangleProject.Client.Components

@inject HttpClient Http
@inject NavigationManager nav
@inject NavigationManager Nav


<h3>GamesList</h3>



@if (user != null)
{

    <input style="border:2px solid blue" type="text" @bind="gameName" />
    <br />
    <input type="button" value="Create Game" @onclick=@(()=>AddNewGame(UserId, gameName))>


    <p>The Games:</p>

    @foreach (GameForEditor game in user.UserGames)
    {

        <span>
            <GameCard GameFullName="@game.GameFullName" gameCode="@game.GameCode" GamePublishStatus="@game.PublishStatus" isCheckboxClicked="@(async () => await changePublish(game))" showMsg="(() => showMessage(game.GameFullName, game))" gameId="@game.ID" />
            <span> </span>
            @*<img src="/trash3.svg" alt="Icon" @onclick="(() => showMessage(game.GameFullName, true))" />*@
            @if (isClicked)
            {


                <PopupComp Headline="@deleteHeadLinePopUp" Text1="@deleteTextPopUp1" gameName="@gameNameToDelete" Text2="@deleteTextPopUp2" GameIdToDelete="@(async () => await DeleteGame(game1))" ShowMsg="closedPopUp" actionButtonText="מחק משחק" cancelButtonText="בטל"></PopupComp>

            }           
        </span>

    }
}



@if (msg != "")
{
    <p>@msg</p>
    <input type="button" value="reload" @onclick=Navigate />
}


@code {


    [CascadingParameter]
    public int UserId { get; set; }

    UserWithGames user;
    GameForEditor gameToDelete = new GameForEditor();
    List<GameForEditor> newGame;

    bool isClicked = false;
    string msg = "";
    string gameName = "";
    string deleteHeadLinePopUp = "מחיקת משחק";
    string deleteTextPopUp1 = "אתה עומד למחוק את המשחק ";
    string deleteTextPopUp2 = "?האם אתה בטוח";
    string gameNameToDelete = "";
    GameForEditor game1;


    void showMessage(string gName, GameForEditor g)
    {
        game1 = g;
        gameNameToDelete = gName;
        isClicked = true;
    }

    void closedPopUp()
    {
        isClicked = false;
    }


    void Navigate()
    {
        Nav.NavigateTo("./", true);
    }

    protected override async Task OnInitializedAsync()
    {
        var userRes = await Http.GetAsync("api/Games/" + UserId);

        if (userRes.IsSuccessStatusCode)
        {
            user = userRes.Content.ReadFromJsonAsync<UserWithGames>
    ().Result;
        }
        else
        {
            string error = userRes.Content.ReadAsStringAsync().Result;
            switch (error)
            {
                case "No Session":
                    msg = "Session error, please reload page";
                    break;
                case "User Not Logged In":
                    msg = "You are not logged in, please reload page to try again";
                    break;
                case "User Not Found":
                    msg = "the user details not found, please reload page to try again";
                    break;
            }
        }
    }

    protected async Task AddNewGame(int UserId, string gameName)
    {
        var AddResopnse = await Http.GetAsync("api/Games/" + UserId + "/addGame/" + gameName);

        if (AddResopnse.IsSuccessStatusCode)
        {

            GameForEditor newGame = AddResopnse.Content.ReadFromJsonAsync<GameForEditor>
                ().Result;
            user.UserGames.Add(newGame);
            nav.NavigateTo("./EditGamePage/" + newGame.GameFullName + "/" + newGame.ID);

        }
        else
        {
            string error = AddResopnse.Content.ReadAsStringAsync().Result;

            switch (error)
            {
                case "No Session":
                    msg = "Session error, please reload page";
                    break;

                case "User Not Logged In":
                    msg = "You are not logged in, please reload page to try again";
                    break;

                case "User Not Found":
                    msg = "You tried to update a game that is not associated with your user ";
                    break;

                case "Game not created":
                    msg = "The game you have tried to create, faild.";
                    break;
            }
        }
    }


    protected async Task changePublish(GameForEditor game)
    {
        GamePublish gameToSend = new GamePublish();
        gameToSend.ID = game.ID;
        gameToSend.PublishStatus = game.PublishStatus;

        if (gameToSend.PublishStatus == "Eligible")
        {
            gameToSend.PublishStatus = "Published";
        }
        else
        {
            gameToSend.PublishStatus = "Eligible";
        }

        var userRes = await Http.PostAsJsonAsync("api/Games/" + UserId + "/publishGame", gameToSend);

        if (userRes.IsSuccessStatusCode)
        {
            int index = user.UserGames.IndexOf(game);
            if (user.UserGames[index].PublishStatus == "Eligible")
            {
                user.UserGames[index].PublishStatus = "Published";
            }
            else
            {
                user.UserGames[index].PublishStatus = "Eligible";
            }
        }

        else
        {
            string error = userRes.Content.ReadAsStringAsync().Result;

            switch (error)
            {
                case "No Session":
                    msg = "Session error, please reload page";
                    break;

                case "User Not Logged In":
                    msg = "You are not logged in, please reload page to try again";
                    break;

                case "It's Not Your Game":
                    msg = "You tried to update a game that is not associated with your user ";
                    break;
            }
        }
    }


    protected async Task DeleteGame(GameForEditor gameToDelete)
    {

        var deleteResponse = await Http.DeleteAsync("api/Games/" + UserId + "/" + gameToDelete.ID);
        if (deleteResponse.IsSuccessStatusCode)
        {
            user.UserGames.Remove(gameToDelete);
        }

        else
        {
            string error = deleteResponse.Content.ReadAsStringAsync().Result;

            switch (error)
            {
                case "No Session":
                    msg = "Session error, please reload page";
                    break;

                case "User Not Logged In":
                    msg = "You are not logged in, please reload page to try again";
                    break;

                case "Failed to delete game":
                    msg = "The game deleting process was failed ";
                    break;

                case "Failed to delete matches":
                    msg = "The matches deleting process was failed ";
                    break;

            }
        }
    }
}
