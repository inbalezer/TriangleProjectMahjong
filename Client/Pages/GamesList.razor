@page "/GamesList/{isInstructionExist:bool}"
@using TriangleProject.Shared.Models.Editor
@using TriangleProject.Shared.Models.Matches
@using TriangleProject.Shared.Models.Portelem
@using TriangleProject.Client.Components



@inject HttpClient Http
@inject NavigationManager nav
@inject NavigationManager Nav


<h5 class="PageMainTitle">המשחקים שלי</h5>

<span>

   <lottie-player src="https://lottie.host/3024880f-5e07-4998-abe0-50bf8ac556a9/aM7ORFAgvx.json" background="transparent" speed="1" style="width: 16.5vw; height: 16.5vh;" loop autoplay></lottie-player>
</span>
<lottie-player src="https://lottie.host/3024880f-5e07-4998-abe0-50bf8ac556a9/aM7ORFAgvx.json" background="transparent" speed="1" style="width: 20vw; height: 20vh; " loop autoplay></lottie-player>



<p style="color: rgba(98, 98, 154, 1); font-family:Heebo; font-size:100%; margin-bottom:-0.03%;" class="">(1-17 תווים)</p>
<div class="row-container">
    <div class="search__container">

        <input class="@search__input" type="text" value="@searchQuery" @oninput="UpdateSearchQuery" @onblur="FilterGames" placeholder="חפש משחק..." />
    </div>

    <div id="plusContainer" class="container">

        <button id="wholePlusButton" class="@AddGamebuttonClass" @onclick="showCreateGameField">
            <span class=@plus>+</span>
        </button>
    </div>
    @if (isPlusButtonClicked)
    {
        <input maxlength="17" class="@circularInput" type="text" @bind="gameName" placeholder="הקלד שם משחק..." @oninput='e => HandleInputGameName(e, "gameName")' />
        @if (!string.IsNullOrEmpty(gameName))
        {
            <span class="character-count"> @characterCountGameName / @characterGameNameLimit </span>
        }


        <input type="button" value="צור משחק" @onclick=@(()=>AddNewGame(UserId, gameName)) class="@createButtonStyle" disabled="@isCreateButtonDisabled">
        @*<input type="button" value="בטל" @onclick="ClearNewGame">*@
    }



</div>

@if (user != null)
{
    @*    <input type="button" id="addGame" @onclick="showCreateGameField">
        @if (isPlusButtonClicked)
        {
            <p>(1-17 תווים)</p>
            <input maxlength="17" style="border:2px solid blue" type="text" @bind="gameName" placeholder="הקלד שם משחק..." @oninput='e => HandleInputGameName(e, "gameName")' />
            @if (!string.IsNullOrEmpty(gameName))
            {
                <span class="character-count"> @characterCountGameName / @characterGameNameLimit </span>
            }
            <br />

            <input type="button" value="צור משחק" @onclick=@(()=>AddNewGame(UserId, gameName)) disabled="@isCreateButtonDisabled">
            <input type="button" value="בטל" @onclick="ClearNewGame">
        }
    *@


    <div id="allGames">
        @if (!isThereGames)
        {
            @foreach (GameForEditor game in user.UserGames.Where(g => string.IsNullOrEmpty(searchQuery) || g.GameFullName.ToLower().Contains(searchQuery.ToLower())))
            {


                <span id="anyGameCard">
                    <GameCard GameFullName="@game.GameFullName" gameCode="@game.GameCode" GamePublishStatus="@game.PublishStatus" isCheckboxClicked="@(async () => await changePublish(game))" showMsg="(() => showMessage(game.GameFullName, game))" gameId="@game.ID" GameInstructionToCheck="@insCheck" />

                    <span> </span>

                    @if (isClicked)
                    {
                        <PopupComp Headline="@deleteHeadLinePopUp" Text1="@deleteTextPopUp1" gameName="@gameNameToDelete" Text2="@deleteTextPopUp2" isDeleteCompClicked="@isClicked" GameIdToDelete="@(async () => await DeleteGame(game1))" ShowMsg="closedPopUp" actionButtonText="מחק משחק" cancelButtonText="בטל"></PopupComp>
                    }
                </span>
                Console.WriteLine(isInstructionExist);
            }

        }

        else
        {
            <div id="NoGamesFound">
                היי, איזה כיף שבאת!
                <br/>
                צור משחק בלחיצה על הפלוס
                <br />
                 המשחקים שלך יופיעו כאן :)
            </div>
            
        }
    </div>
}



@if (msg != "")
{
    <p>@msg</p>
    <input type="button" value="reload" @onclick=Navigate />
}


@code {


    [CascadingParameter]
    public int UserId { get; set; }
    [Parameter]
    public bool isInstructionExist { get; set; }
    UserWithGames user;
    GameForEditor gameToDelete = new GameForEditor();
    List<GameForEditor> newGame;
    List<GameForEditor> filteredGames;

    bool isClicked = false;
    bool isPlusButtonClicked = false;
    bool isThereGames => user.UserGames == null || user.UserGames.Count == 0;
    bool isCreateButtonDisabled => string.IsNullOrEmpty(gameName);
    bool isExpanded = false;
    bool insCheck;
    string msg = "";
    string gameName = "";
    string deleteHeadLinePopUp = "מחיקת משחק";
    string deleteTextPopUp1 = "אתה עומד למחוק את המשחק : ";
    string deleteTextPopUp2 = "האם אתה בטוח?";
    string gameNameToDelete = "";
    string searchQuery = "";
    string circularInput => isExpanded ? "circularInput" : "circularInputDisplayNone";
    string search__input => isExpanded ? "searchInputOpen" : "search__input";
    string createButtonStyle => isCreateButtonDisabled ? "disabledNewGameButton" : "activeNewGameButton";
    private string AddGamebuttonClass => isExpanded ? "circle-expended" : "circle-button";
    private string plus => isExpanded ? "plus-expended" : "plus";
    int characterGameNameLimit = 17;
    int characterCountGameName = 0;
    GameForEditor game1;


    void HandleInputGameName(ChangeEventArgs e, string field)
    {
        var inputText = (string)e.Value;

        if (inputText.Length > characterGameNameLimit)
        {
            // Truncate the input to the character limit
            inputText = inputText.Substring(0, characterGameNameLimit);
        }

        else if (field == "gameName")
        {
            gameName = inputText;
            characterCountGameName = gameName.Length;
        }
    }

    void showCreateGameField()
    {
        isPlusButtonClicked = !isPlusButtonClicked;
        isExpanded = !isExpanded;

        if (!isExpanded)
        {
            gameName = "";
        }
    }

    void FilterGames()
    {
        if (!string.IsNullOrEmpty(searchQuery))
        {
            filteredGames = user.UserGames.Where(game => game.GameFullName.Contains(searchQuery)).ToList();

        }
        else
        {
            filteredGames = null; // Show all games if the search query is empty
        }
    }

    void UpdateSearchQuery(ChangeEventArgs e)
    {
        searchQuery = e.Value.ToString();
    }

    void showMessage(string gName, GameForEditor g)
    {
        game1 = g;
        gameNameToDelete = gName;
        isClicked = true;
    }

    void closedPopUp()
    {
        isClicked = false;
    }
    //void ClearNewGame()
    //{
    //    gameName = "";
    //    isPlusButtonClicked = false;
    //}

    void Navigate()
    {
        Nav.NavigateTo("./", true);
    }

    protected override async Task OnInitializedAsync()
    {

        insCheck = isInstructionExist;


        var userRes = await Http.GetAsync("api/Games/" + UserId);

        if (userRes.IsSuccessStatusCode)
        {
            user = userRes.Content.ReadFromJsonAsync<UserWithGames>
    ().Result;
        }
        else
        {
            string error = userRes.Content.ReadAsStringAsync().Result;
            switch (error)
            {
                case "No Session":
                    msg = " עבר זמן רב ללא שימוש באתר, אנא רענן את העמוד";
                    break;
                case "User Not Logged In":
                    msg = "אינך מחובר למערכת, התחבר וטען את העמוד מחדש";
                    break;
                case "User Not Found":
                    msg = "פרטי המשתמש לא נמצאו, טען את העמוד מחדש ונסה שוב ";
                    break;
            }
        }
    }

    protected async Task AddNewGame(int UserId, string gameName)
    {
        var AddResopnse = await Http.GetAsync("api/Games/" + UserId + "/addGame/" + gameName);

        if (AddResopnse.IsSuccessStatusCode)
        {

            GameForEditor newGame = AddResopnse.Content.ReadFromJsonAsync<GameForEditor>
                ().Result;
            user.UserGames.Add(newGame);
            nav.NavigateTo("./EditGamePage/" + newGame.GameFullName + "/" + newGame.ID);

        }
        else
        {
            string error = AddResopnse.Content.ReadAsStringAsync().Result;

            switch (error)
            {
                case "No Session":
                    msg = " עבר זמן רב ללא שימוש באתר, אנא רענן את העמוד";
                    break;

                case "User Not Logged In":
                    msg = "אינך מחובר למערכת, התחבר וטען את העמוד מחדש";
                    break;
                case "User Not Found":
                    msg = "פרטי המשתמש לא נמצאו, טען את העמוד מחדש ונסה שוב ";
                    break;

                case "Game not created":
                    msg = "יצירת המשחק נכשלה, נסה שוב";
                    break;
            }
        }
    }


    protected async Task changePublish(GameForEditor game)
    {
        GamePublish gameToSend = new GamePublish();
        gameToSend.ID = game.ID;
        gameToSend.PublishStatus = game.PublishStatus;

        if (gameToSend.PublishStatus == "Eligible")
        {
            gameToSend.PublishStatus = "Published";
        }
        else
        {
            gameToSend.PublishStatus = "Eligible";
        }

        var userRes = await Http.PostAsJsonAsync("api/Games/" + UserId + "/publishGame", gameToSend);

        if (userRes.IsSuccessStatusCode)
        {
            int index = user.UserGames.IndexOf(game);
            if (user.UserGames[index].PublishStatus == "Eligible")
            {
                user.UserGames[index].PublishStatus = "Published";
            }
            else
            {
                user.UserGames[index].PublishStatus = "Eligible";
            }
        }

        else
        {
            string error = userRes.Content.ReadAsStringAsync().Result;

            switch (error)
            {
                case "No Session":
                    msg = " עבר זמן רב ללא שימוש באתר, אנא רענן את העמוד";
                    break;

                case "User Not Logged In":
                    msg = "אינך מחובר למערכת, התחבר וטען את העמוד מחדש";
                    break;

                case "It's Not Your Game":
                    msg = "המשחק אותו אתה מנסה לעדכן אינו משוייך למשתמש שלך. ";
                    break;
            }
        }
    }

    protected async Task DeleteGame(GameForEditor gameToDelete)
    {

        var deleteResponse = await Http.DeleteAsync("api/Games/" + UserId + "/" + gameToDelete.ID);
        if (deleteResponse.IsSuccessStatusCode)
        {
            user.UserGames.Remove(gameToDelete);
        }

        else
        {
            string error = deleteResponse.Content.ReadAsStringAsync().Result;

            switch (error)
            {
                case "No Session":
                    msg = " עבר זמן רב ללא שימוש באתר, אנא רענן את העמוד";
                    break;

                case "User Not Logged In":
                    msg = "אינך מחובר למערכת, התחבר וטען את העמוד מחדש";
                    break;

                case "Failed to delete game":
                    msg = "ניסיון מחיקת המשחק נכשל, נסה שוב ";
                    break;

                case "Failed to delete matches":
                    msg = "ניסיון מחיקת ההתאמות השייכות למשחק נכשל, נסה שוב ";
                    break;

            }
        }
    }
}

<style>
    #addGame {
        background-image: url('../css/games list imgs/create new game.svg');
        background-size: cover;
        background-repeat: no-repeat;
        border: none;
        width: 100px;
        height: 100px;
        cursor: pointer;
    }

    .search__container {
        padding-top: 1vw;
        width: 100%;
        max-width: 10vw;
        margin: 0 auto;
        position: relative;
        right: 74vh;
    }

    .search__input {
        box-shadow: 0 2px rgba(0, 0, 0, 0.1);
        width: 10vw;
        padding: 0.8vw 2.4vw; /* 40% smaller than 2vw and 4vw */
        background-image: linear-gradient(to bottom, #fff, #f8f7f7);
        transition: transform 250ms ease-in-out;
        font-size: 0.84vw; /* 40% smaller than 1.4vw */
        line-height: 1.08vw; /* 40% smaller than 1.8vw */
        color: #54547C;
        background-image: url('icon ionic-ios-search.svg');
        background-repeat: no-repeat;
        background-size: 2vw 2vw; /* 40% smaller than 3.6vw */
        background-position: 10% center;
        border-radius: 30px; /* 40% smaller than 50px */
        border: 0.12vw solid #f3f3f3; /* 40% smaller than 0.2vw */
        transition: all 250ms ease-in-out;
        backface-visibility: hidden;
        transform-style: preserve-3d;
    }

        .search__input::placeholder {
            color: rgba(87, 87, 86, 0.8);
            text-transform: uppercase;
            letter-spacing: 0.09vw; /* 40% smaller than 0.15vw */
        }

        .search__input:hover,
        .search__input:focus {
            padding: 0.8vw 0.5vw;
            outline: 0;
            border: 0.12vw solid transparent; /* 40% smaller than 0.2vw */
            border-radius: 20px;
            border-bottom: 0.08vw solid #f3f3f3;
            background-position: 2% center;
            width: 15vw;
            padding-left: 0.8vw;
        }
</style>