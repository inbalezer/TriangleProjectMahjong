@using Microsoft.AspNetCore.Components.Web

<div class="popup-overlay">
    <div class="popup-container">
        <div class="popup-content">
            <div class="popup-close">
                @if (!isReload)
                {
                    <button class="popup-close-button" @onclick="() => IsDeleteButtonClicked(true)">x</button>
                }
            </div>
            <h3>@Headline</h3>
            <hr />
            <div id="content-div">
                <p>
                    @Text1
                    @if (!string.IsNullOrEmpty(gameName))
                    {
                        <spn>"@gameName" </spn>
                    }
                </p>
                <p>@Text2 </p>
            </div>
            <div>
                @ChildContent
                
            </div>

            @if (isDeleteCompClicked)
            {
                callToActionPopUpColor = "rgba(201, 81, 81, 1)";
            }
            <div class="popup-buttons">
                
                @if (isReload)
                {
                    <button class="popup-button" style="background-color: @callToActionPopUpColor ; color: @secondPopUpColor;" @onclick="()=> DeleteGameFromList(true)">@actionButtonText</button>

                }
                else
                {
                    
                    <button class="popup-button" style="background-color:@secondPopUpColor ; color: @callToActionPopUpColor; border: 2px solid @callToActionPopUpColor;" @onclick="() => IsDeleteButtonClicked(false)">@cancelButtonText</button>
                    <button class="popup-button" style="background-color: @callToActionPopUpColor ; color: @secondPopUpColor;" @onclick="()=> DeleteGameFromList(true)">@actionButtonText</button>
                }
               
              
            </div>
        </div>
    </div>
</div>


@code {

    string callToActionPopUpColor = "lightskyblue";
    string secondPopUpColor = "white";
    [Parameter]
    public RenderFragment ChildContent { get; set; }
      

    [Parameter]
    public bool notDeleted { get; set; }

    [Parameter]
    public int gameId { get; set; }

    [Parameter]
    public string gameName { get; set; }
    [Parameter]
    public string actionButtonText { get; set; }
    [Parameter]
    public string cancelButtonText { get; set; }

    [Parameter]
    public string Headline { get; set; }

    [Parameter]
    public string Text1 { get; set; }

    [Parameter]
    public string Text2 { get; set; }

    [Parameter]
    public bool isXclicked { get; set; } = false;

    [Parameter]
    public bool isDeleteCompClicked { get; set; } = false;

    [Parameter]
    public bool isReload { get; set; } = false;

    [Parameter]
    public EventCallback<bool> ShowMsg { get; set; }

    [Parameter]
    public EventCallback<bool> xClicked { get; set; }


    [Parameter]
    public EventCallback<int> GameIdToDelete { get; set; }


    private void DeleteGameFromList(bool closedPopup)
    {
        GameIdToDelete.InvokeAsync(gameId);
        if (closedPopup)
        {
            ShowMsg.InvokeAsync(false);
        }
    }

    private void IsDeleteButtonClicked(bool X)
    {
        notDeleted = true;
        isXclicked = X;
        ShowMsg.InvokeAsync(notDeleted);
        xClicked.InvokeAsync(isXclicked);
    }

}