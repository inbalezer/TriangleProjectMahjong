@page "/EditGamePage/{GameFullName}/{newGameID:int}"
@using TriangleProject.Shared.Models.Editor
@using TriangleProject.Shared.Models.Matches
@using TriangleProject.Shared.Models.Portelem
@using System.ComponentModel.DataAnnotations;
@using Microsoft.AspNetCore.Components.Forms;
@using TriangleProject.Client.Components;


@inject HttpClient Http
@inject NavigationManager Nav
@inject NavigationManager nav



<h3 id="PageMainTitle">עריכת משחק: @GameFullName</h3>


@if (showWarningMessage || !isNameAndInstraction || GameFullName == "")
{
    <button class="@disabledArrow" @onclick="showMessageReturn" title="לא ניתן לשמור משחק ללא שם או הנחייה" disabled="@isReturnButtonDisabled "><img id="arrow1" src="../css/edit game page/arrow.svg" /> @returnText </button>
}
else
{
    <button style="" class="returnBtnClass" @onclick="showMessageReturn" @onmouseover="() => OnMouseOver(true)" @onmouseout="() => OnMouseOver(false)" disabled="@isReturnButtonDisabled"><img id="arrow1" src="../css/edit game page/arrow.svg" /> @returnText </button>

}
<div id="general-settings">


    <h4 id="general-settings-title">הגדרות כלליות</h4>
    <hr id="underline1" />


    <div id="character-count-input1">
        <span>שם המשחק:</span> <input class="input1" maxlength="17" type="text" @bind="GameFullName" @oninput='e => HandleInput(e, "gameName")' />
        @if (isNoGameName && string.IsNullOrEmpty(GameFullName))
        {
            <span style="color:#C95151; font-size:70%; font-weight:300;">לא ניתן לשמור משחק ללא שם.</span>


        }

        @if (!string.IsNullOrEmpty(GameFullName))
        {
            <span id="character-count1" class="character-count" style="@(characterGameNameLimit == characterCountGameName ? "color: red;" : "")">@characterGameNameLimit/ @characterCountGameName</span>

        }
        <p id="instraction1">(1-17 תווים)</p>
    </div>


    <div id="character-count-input2">

        <span>הנחיית המשחק:</span>
        <span class="text-inst">לחצו והתאימו בין</span>
        <input class="input2" maxlength="23" type="text" @bind="GameInstruction" @oninput='e => HandleInput(e, "gameInstruction")' />

        <span class="text-inst">ורוקנו את הלוח.</span>
        @if (isNoGameIntruction && GameInstruction == "")
        {
            <span style="color:#C95151; font-size:70%; font-weight:300;">לא ניתן לשמור משחק ללא הנחייה.</span>

        }

        @if (!string.IsNullOrEmpty(GameInstruction))
        {

            <span id="character-count2" class="character-count" style="@(characterGameInstructionLimit == characterCountInstruction ? "color: red;" : "")">@characterGameInstructionLimit/ @characterCountInstruction</span>
        }

        <p id="instraction2">(1-23 תווים)</p>

        @*<input type="button" value="שמור" @onclick="(() => updateNameAndInstruction(gameWithInstruction))" class="SaveNameAndInstrucBtn" disabled="@isSaveButtonDisabled">*@




        <button value="שמור" @onclick="(() => updateNameAndInstruction(gameWithInstruction))" id="SaveNameAndInstrucBtn" class="@saveNameAndIntruc" disabled="@isSaveButtonDisabled">
            <span style="display: contents;">
                <span style="align-items: center; display: inline-flex">שמור <img style= "padding-right: 0.7vw;
    /* padding-top: 1.3vh; */
    height: 2vh;" src="../css/edit game page/plus.svg" /></span>
                @if (isSaveBtnClicked)
                {
                    <span >
                        <lottie-player src="https://lottie.host/cbb86737-1d0c-4970-8b43-8ad5dfc74631/FwJpUmo6j9.json" speed="0.7" style="    width: 8vw; position: fixed; height: 8vh; top: 41vh; left: 62.7vw;" autoplay></lottie-player>
                    </span>
                    isSaveBtnClicked = false;
                }
            </span>
        </button>





        @*<button value="שמור" @onclick="(() => updateNameAndInstruction(gameWithInstruction))" class="SaveNameAndInstrucBtn" disabled="@isSaveButtonDisabled">
                שמור
                @if (isSaveBtnClicked)
                {
                    <span>
                        <lottie-player src="https://lottie.host/cbb86737-1d0c-4970-8b43-8ad5dfc74631/FwJpUmo6j9.json" speed="0.7" style="width: 8vw; height: 8vh;" autoplay></lottie-player>

                    </span>




                    isSaveBtnClicked = false;
                }
            </button>*@
    </div>

</div>

@*<input type="button" value="שמור" @onclick=Navigate />*@


<div id="add-match">
    <h4 id="add-match-title">הוספת זוגות</h4>
    <hr id="underline2" />

    @if (isNameAndInstructionExist)
    {
        @if (!isLimitMatches || editAvailable)
        {

            <div class="containerWithTwoDivs">


                <div class="toggleSides" >
                    <div class="imgOrTextToggle">
                        <img id="photoImg" src="@toggleImgSrc" />
                        <div class="toggleStick">
                            <input type="button" class="@class1MoveCircle" @onclick="(() =>makeToggle(true))" />
                        </div>
                        <img id="textImg" src="@toggleTextSrc" />
                    </div>
                    @*<InputCheckbox @bind-Value="textChanged" />*@

                    <img class="big-brik" src="../css/edit game page/big brik.svg" />


                    @if (!textChanged)
                    {
                        @if (editMatch.ID == 0)
                        {
                            currentMatchToShow = newMatch;
                        }
                        currentMatchToShow.FirstIsText = true;
                        Console.WriteLine(currentMatchToShow.FirstMatch);

                        if (currentMatchToShow.FirstMatch != "")
                        {
                            currentValue = currentMatchToShow.FirstMatch;

                            if (currentMatchToShow.FirstMatch != null)
                            {
                                if (currentMatchToShow.FirstMatch.Contains("uploadedFiles/"))
                                {
                                    if (!string.IsNullOrEmpty(currentMatchToShow.FirstMatch))
                                    {
                                        if (!string.IsNullOrEmpty(priviousValue))
                                        {
                                            if (!priviousValue.Contains("uploadedFiles/"))
                                            {
                                                currentMatchToShow.FirstMatch = priviousValue;
                                            }
                                            else
                                            {
                                                currentMatchToShow.FirstMatch = "";
                                            }
                                        }
                                        else
                                        {
                                            currentMatchToShow.FirstMatch = "";
                                        }
                                    }
                                    else
                                    {
                                        currentMatchToShow.FirstMatch = "";
                                    }

                                }
                                else
                                {
                                    currentMatchToShow.FirstMatch = currentValue;
                                }
                            }

                        }

                        <div class="character-count-input">
                            <input maxlength="15" class="text-input-match1" type="text" @bind="currentMatchToShow.FirstMatch" @oninput='e => HandleInput(e, "first")' />

                            <p class="condition-text"> ניתן להכניס בין 1-15 תווים </p>

                            @if (!string.IsNullOrEmpty(currentMatchToShow.FirstMatch))
                            {

                                <span id="firstMatchChars" class="character-count" style="@(characterLimit == characterCountFirst ? "color: red;" : "")">@characterLimit/ @characterCountFirst</span>
                            }
                        </div>
                    }

                    else
                    {

                        priviousValue = currentMatchToShow.FirstMatch;
                        currentMatchToShow.FirstIsText = false;
                        if (myFileImage1 != "")
                        {
                            currentMatchToShow.FirstMatch = myFileImage1;
                            <div class="custom-input-file1">
                                <label for="FileInputID">שנה תמונה</label>
                            </div>
                        }
                        else
                        {
                            <div class="custom-input-file1">
                                <label for="FileInputID">העלה תמונה</label>
                            </div>
                        }

                        @*<label for="FileInֵputID"> העלה תמונה</label>*@
                        @*<InputFile id="FileInputID" accept="image/png, image/jpeg" OnChange="((e) => UploadFile(e, true))" class="custom-input-file"></InputFile>*@
                        <div class="custom-input-file">
                            <InputFile id="FileInputID" accept="image/png, image/jpeg" OnChange="((e) => UploadFile(e, true))"></InputFile>

                        </div>
                        <p class="condition-text"> קבצי Png ,Jpeg בלבד </p>



                        @if (myFileImage1 != "")
                        {
                            <img class="chosen-img"  src="@myFileImage1" width="150" />
                            @*<input type="button" value="העבר למחיקה " @onclick="MakeDeleteList" />*@
                        }
                        <br />
                        if (unacceptedImg != "")
                        {
                            <span class="img-not-good1">@unacceptedImg</span>
                        }
                        if (firstImgTooBig != "")
                        {
                            <span class ="img-not-good1">@firstImgTooBig</span>
                        }
                    }

                </div>

                <hr id="deviding-line-addMatch"/>
                
                <div class="toggleSides" id="rightSide">


                    <div class="imgOrTextToggle">
                        <img id="photoImg" src="@toggleImgSrc2" />
                        <div class="toggleStick">
                            <input type="button" class="@class1MoveCircle2" @onclick="(() =>makeToggle(false))" />
                        </div>
                        <img id="textImg" src="@toggleTextSrc2" />
                    </div>
                    @*<InputCheckbox @bind-Value="text2Changed" />*@


                    <img class="big-brik" src="../css/edit game page/big brik.svg" />

                    @if (!text2Changed)
                    {
                        priviousValue2 = currentMatchToShow.SecondMatch;

                        @if (editMatch.ID == 0)
                        {
                            currentMatchToShow = newMatch;
                        }

                        currentMatchToShow.SecondIsText = false;
                        if (myFileImage2 != "")
                        {
                            currentMatchToShow.SecondMatch = myFileImage2;
                            <div  class="custom-input-file2">
                                <label for="FileInputID2">שנה תמונה</label>
                            </div>
                        }
                        else
                        {
                            <div class="custom-input-file2">
                                <label for="FileInputID2">העלה תמונה</label>
                            </div>
                        }
                        @*<label for="FileInֵputID"> העלה תמונה</label>
                            <InputFile id="FileInputID" accept="image/png, image/jpeg" OnChange="((e) => UploadFile(e, false))"></InputFile>*@
                        <div class="custom-input-file">
                            <InputFile id="FileInputID2" accept="image/png, image/jpeg" OnChange="((e) => UploadFile(e, false))"></InputFile>

                        </div>
                        <p class="condition-text"> קבצי Png ,Jpeg בלבד </p>


                        @if (myFileImage2 != "")
                        {
                            <img class="chosen-img"src="@myFileImage2" width="150" />
                            @*<input type="button" value="העבר למחיקה " @onclick="MakeDeleteList" />*@
                        }
                        <br />

                        if (unacceptedImg2 != "")
                        {
                            <span class="img-not-good2" >@unacceptedImg2</span>
                        }
                        if (secondImgTooBig != "")
                        {
                            <span class="img-not-good2">@secondImgTooBig</span>
                        }


                    }
                    else
                    {

                        @*currentValue2 = currentMatchToShow.SecondMatch;*@
                        currentMatchToShow.SecondIsText = true;


                        if (currentMatchToShow.SecondMatch != "")
                        {
                            currentValue2 = currentMatchToShow.SecondMatch;

                            if (currentMatchToShow.SecondMatch != null)
                            {
                                if (currentMatchToShow.SecondMatch.Contains("uploadedFiles/"))
                                {
                                    @*currentMatchToShow.SecondMatch = currentValue2;*@

                                    if (!string.IsNullOrEmpty(currentMatchToShow.SecondMatch))
                                    {
                                        if (!string.IsNullOrEmpty(priviousValue2))
                                        {
                                            if (!priviousValue2.Contains("uploadedFiles/"))
                                            {
                                                currentMatchToShow.SecondMatch = priviousValue2;
                                            }
                                            else
                                            {
                                                currentMatchToShow.SecondMatch = "";
                                            }
                                        }
                                        else
                                        {
                                            currentMatchToShow.SecondMatch = "";
                                        }

                                    }
                                    else
                                    {
                                        currentMatchToShow.SecondMatch = "";
                                    }
                                }
                                else
                                {
                                    @*newMatch.SecondMatch = priviousValue2;*@
                                    currentMatchToShow.SecondMatch = currentValue2;
                                    Console.WriteLine("empty");
                                }
                            }
                        }


                        <div class="character-count-input">
                            <input maxlength="15" class="text-input-match1" type="text" @bind="currentMatchToShow.SecondMatch"
                                   @oninput='e => HandleInput(e, "second")' />
                            <p class="condition-text"> ניתן להכניס בין 1-15 תווים </p>

                            @if (!string.IsNullOrEmpty(currentMatchToShow.SecondMatch))
                            {

                                <span id="secondMatchChars" class="character-count" style="@(characterLimit == characterCountSecond ? "color: red;" : "")">@characterLimit/ @characterCountSecond</span>
                            }
                        </div>

                    }



                    @if (editAvailable)
                    {
                        if (currentFirstEdit != currentMatchToShow.FirstMatch || currentSecondEdit != currentMatchToShow.SecondMatch)
                        {
                            isChanging = false;
                        }
                        else
                        {
                            isChanging = true;
                        }
                        <input type="button" class="cancelChanges" value="בטל שינויים"  disabled=@isChanging @onclick="@(async ()=> await cancleChanges(currentMatchToShow.ID))" />
                    }
                    <br />

                    
                </div>
            </div>
            <input id="saveMatchId" class="@saveMatch" type="submit" value="שמור זוג" @onclick="(() =>AddMatch(currentMatchToShow))" disabled="@IsButtonDisabled" />




        }
        else
        {
            <div>
                אופס...
                נראה שהגעת לכמות הזוגות המקסימאלית.
                ניתן לשמור את המשחק ולחזור למסך המשחקים :)
            </div>
        }
    }
    else
    {
        <div>
            רגע לפני שמתחילים...
            מלאו את הנחיית המשחק למעלה
            וקדימה- להוספת הזוגות :)
        </div>
    }

</div>

<div id="all-matches">
    <h4 id="all-matches-title">מאגר הזוגות</h4>
    <hr id="underline3" />

    <span id="couples-span">זוגות</span>
    <span id="edin-span">עריכה</span>
    <span id="delet-span">מחיקה</span>
    <hr id="table-underline" />
    <div id="all-matches-scroll">

        @if (isThereMatches)
        {
            <span id="isThereMatches1">
                מאגר הזוגות עדיין ריק
                
            </span>
            <br/>
            <span id="isThereMatches2">לאחר השמירה, הזוגות יופיעו כאן :)</span>
        }

        else if (fullGame.MatchesList != null)
        {
            

            if (fullGame.MatchesList.Count <= 11 && fullGame.MatchesList.Count <= 18)
            {
                <span class="matches-counter">סה"כ @fullGame.MatchesList.Count זוגות</span>

            }
            else if (fullGame.MatchesList.Count == 19)
            {
                <span class="matches-counter">סה"כ @fullGame.MatchesList.Count זוגות</span>
                <span class="matches-counter">שים לב, ניתן להוסיף רק עוד זוג אחד למאגר</span>

            }
            else
            {
                <span class="matches-counter">סה"כ @fullGame.MatchesList.Count/20 זוגות</span>
                Console.WriteLine(fullGame.MatchesList);
            }

            @if (currentMatchIndex == 0)
            {

                foreach (MatchToShow match in fullGame.MatchesList)
                {

                    <MatchComp matchText="@match.FirstMatch" matchText2="@match.SecondMatch" uploadedImg="" uploadedImg2="" DeleteCallBack="(() => deleteButtonClicked(match))" EditMatchCallBack="@(async ()=> await EditMatchRow(match.ID))" isImageClickable=@isEditMode></MatchComp>

                    if (isDeleteButtonClicked)
                    {
                        <PopupComp ShowMsg="closedReturnPopUp" Headline="@deleteHeadLinePopUp" Text1="@deleteTextPopUp1" isDeleteCompClicked="@isDeleteButtonClicked" GameIdToDelete="@(async () => await DeleteMatchRow(matchToDelete))" actionButtonText="מחק זוג " cancelButtonText="בטל"></PopupComp>

                    }
                }
            }

            else
            {

                foreach (MatchToShow match in fullGame.MatchesList)
                {
                    if (currentMatchIndex != match.ID)
                    {

                        <MatchComp matchText="@match.FirstMatch" matchText2="@match.SecondMatch" uploadedImg="" uploadedImg2="" DeleteCallBack="(() => deleteButtonClicked(match))" EditMatchCallBack="@(async ()=> await EditMatchRow(match.ID))" isImageClickable=@isEditMode></MatchComp>

                        if (isDeleteButtonClicked)
                        {
                            <PopupComp ShowMsg="closedReturnPopUp" Headline="@deleteHeadLinePopUp" Text1="@deleteTextPopUp1" isDeleteCompClicked="@isDeleteButtonClicked" GameIdToDelete="@(async () => await DeleteMatchRow(matchToDelete))" actionButtonText="מחק זוג " cancelButtonText="בטל"></PopupComp>

                        }

                    }

                    else
                    {

                        <MatchComp iseditClassStyle=@true matchText="@match.FirstMatch" matchText2="@match.SecondMatch" uploadedImg="" uploadedImg2="" DeleteCallBack="(() => deleteButtonClicked(match))" EditMatchCallBack="@(async ()=> await EditMatchRow(match.ID))" isImageClickable=@isEditMode></MatchComp>



                        if (isDeleteButtonClicked)
                        {
                            <PopupComp ShowMsg="closedReturnPopUp" Headline="@deleteHeadLinePopUp" Text1="@deleteTextPopUp1" isDeleteCompClicked="@isDeleteButtonClicked" GameIdToDelete="@(async () => await DeleteMatchRow(matchToDelete))" actionButtonText="מחק זוג " cancelButtonText="בטל"></PopupComp>

                        }

                    }
                }
            }








            @*@if(!isEditMode)
                    {
                @class='@(isEditMode ? "disabled" : "")'
                    }*@

        }
    </div>
    @if (!isThereMatches)
    {
        if (errorDeleteImgmsg != "")
        {
            <p>@errorDeleteImgmsg</p>
        }

        <input id="saveGameBtnId" class="@saveGameBtn" type="button" value="שמור וחזור למסך המשחקים" @onclick="@(async ()=> await returnToHome())" />

    }

</div>


@if (msg != "")
{
    <PopupComp ShowMsg="closedReturnPopUp" Headline="שגיאה" Text1="נראה כי עבר זמן רב מאז שהתחברת, הגיע הזמן לרענן את העמוד :)" GameIdToDelete="Navigate" actionButtonText="רענן" isReload="true"></PopupComp>

    @*<input type="button" class="regularUIBtn" value="reload" @onclick=Navigate />*@

}


@if (SettingMsg != "")
{
    <p>@SettingMsg</p>
}

<p>@msg</p>

@if (fullGameMsg != "")
{
    <p>@fullGameMsg</p>
}
@if (isReturnClicked)
{
    <PopupComp Headline="@returnHeadLinePopUp" Text1="@returnTextPopUp1" GameIdToDelete="@(async () => await returnToHome())" ShowMsg="closedReturnPopUp" actionButtonText="שמור וחזור למסך המשחקים " cancelButtonText="חזור ללא שמירה" xClicked="(value) => navigateToGamesScreen(value)"></PopupComp>

}


<div id="publish-conditions">

    <h4 id="publish-conditions-title">תנאים לפרסום</h4>
    <hr id="underline4" />

    <span class="conditionsStyle">
        @if (isNameAndInstraction)
        {
            <img class="NameAndInstraction" src="../css/edit game page/icon awesome-check-circle.svg" />
        }
        else
        {
            <span><img class="NameAndInstraction" src="../css/edit game page/icon awesome-minus-circle.svg" /></span>
        }

        שם והנחיית המשחק

    </span>


    <br />

    <span class="conditionsStyle">

        @if (isEnoughMathces)
        {
            <span><img class="enoughMatches" src="../css/edit game page/icon awesome-check-circle.svg" /></span>
        }
        else
        {
            <span><img class="enoughMatches" src="../css/edit game page/icon awesome-minus-circle.svg" /></span>
        }

        מינימום 5 זוגות

    </span>

    <hr id="deviding-line-PublishConditions" />


    <div class="allPublishBtns">
        <input type="button" class="@publishClasStyle" value="@publishBtnValue" disabled="@isPublish" @onclick="@(async ()=> await publish("Published"))" />
        @if (isReturnPublishClicked || fullGame.PublishStatus == "Published")
        {
            <input type="button" class="@cancelPublish" value="בטל פרסום" @onclick="@(async ()=> await publish("Eligible"))" />
            <img class="cancelPublishIcon" src="../css/edit game page/cancel publish icon.svg" />
            
        }
        <div>
            @if(publishBtnValue == "פרסם")
            {
                <img class="publishIcon" src="../icon feather-plus.svg" />
            }
            else
            {
                <img class="afterPublishIcon" src="../css/edit game page/published icon.svg" />
               
            }
        </div>
    </div>

</div>



@if (publishBtnValue == "פורסם")
{
    publishClasStyle = "afterPublish";
    
}

@if (publishBtnValue == "פורסם" && isReturnPublishClicked)
{
    
    <PopupComp Headline="פורסם בהצלחה!" Text1="@publishMsg" Text2="@gameCodeToShow" GameIdToDelete="navigateToGameAfterPublish" actionButtonText="למשחק" ShowMsg="closedReturnPopUp" cancelButtonText="חזור למסך המשחקים" xClicked="(value) => navigateToGamesScreen(value)">
        <lottie-player src="https://lottie.host/0cd64648-5a27-4896-96dc-b0847ac3b133/g5yILsQ8yu.json" background="transparent" speed="1" style=" width: 60vw;
    height: 60vh;
    position: absolute;
        bottom: 3vh;
    right: -16vw;
z-index:-1;
}" autoplay></lottie-player>

        @if (!string.IsNullOrEmpty(gameCodeToShow))
        {

            <CopyText myText="@gameCodeToShow"></CopyText>

        }   
    </PopupComp>
    publishClasStyle = "afterPublish";

}



<style>
    .custom-input-file {
        position: relative;
        display: inline-block;
        overflow: hidden;
        border-radius: 5px;
    }

        .custom-input-file input[type="file"] {
            position: absolute;
            top: 0;
            left: 0;
            opacity: 0;
            width: 100%;
            height: 100%;
            cursor: pointer;
        }


    #disabled {
        pointer-events: none;
        opacity: 0.5;
    }
</style>



@code {

    [CascadingParameter]
    public int UserId { get; set; }

    [Parameter]
    public string GameFullName { get; set; }

    [Parameter]
    public int newGameID { get; set; }

    [Parameter]
    public bool updateMode { get; set; }

    string msg = "";
    string errorDeleteImgmsg = "";
    string SettingMsg = "";
    string fullGameMsg = "";
    string returnHeadLinePopUp = "חזור למסך ״המשחקים שלי";
    string returnTextPopUp1 = "אתה עומד לחזור למסך ״המשחקים שלי״. אם קיים זוג חדש שטרם שמרת, הוא לא ישמר. ";
    string deleteHeadLinePopUp = "מחיקת זוג";
    string deleteTextPopUp1 = "אתה עומד למחוק את הזוג. האם אתה בטוח?";
    string gameNameToReturn = "";
    string myFileImage = "";
    string myFileImage1 = "";
    string myFileImage2 = "";
    string GameInstruction = "";
    string currentValue = "";
    string currentValue2 = "";
    string publishBtnValue = "פרסם";
    string publishMsg = " איזה כיף, המשחק שלך מחכה לך במסך המשחקים. קוד המשחק שלך הוא:";
    string unacceptedImg = "";
    string unacceptedImg2 = "";
    string previousValue = "";
    string gameCodeToShow = "";
    string priviousValue = "";
    string priviousValue2 = "";
    string publishClasStyle = "";
    string firstImgTooBig = "";
    string secondImgTooBig = "";
    string toggleImgSrc => textChanged ? "../2material-photo.svg" : "../icon material-photo.svg";
    string toggleTextSrc => textChanged ? "../2text-fields (2).svg" : "../icon material-text-fields.svg";
    string class1MoveCircle => textChanged ? "toggleCircle2" : "toggleCircle1";
    string toggleImgSrc2 => text2Changed ? "../icon material-photo.svg" : "../2material-photo.svg";
    string toggleTextSrc2 => text2Changed ? "../icon material-text-fields.svg" : "../2text-fields (2).svg";
    string class1MoveCircle2 => text2Changed ? "toggleCircle1" : "toggleCircle2";
    string returnText => isMouseOver ? "שמור וחזור" : "";
    string returnTextDis => isReturnButtonDisabled ? "לא ניתן לשמור משחק ללא שם והנחיה" : "->";
    string noGameName => isNoGameName ? "emptyGameName" : "";
    string noGameInstruction => isNoGameIntruction ? "emptyGameName" : "";
    string currentFirstEdit = "";
    string currentSecondEdit = "";
    string disabledArrow => isMouseOver ? "abledHoverArrow" : "returnBtnClassDis";
    string cancelPublish => isCancelPublishClicked ? "cancelInvisable" : "cancleVisable";
    string saveGameBtn => isReturnButtonDisabled ? "disabledSaveGameBtn" : "regularUIBtn";
    string saveMatch => IsButtonDisabled ? "disabledSaveMatchBtn" : "regularUIBtn";
    string saveNameAndIntruc => isSaveButtonDisabled ? "disabledSaveNameInstBtn" : "regularUIBtn";

    @*string msg = "";*@
    bool isCancelPublishClicked = false;
    bool FirstIsText;
    bool SecondIsText;
    bool isReturnClicked = false;
    bool isSaveBtnClicked = false;
    bool isPublish = true;
    bool textChanged = false;
    bool text2Changed = false;
    bool showImg = false;
    bool editAvailable = false;
    bool isEnoughMathces = false;
    bool isNameAndInstraction = false;
    bool isLimitMatches => fullGame.MatchesList != null && fullGame.MatchesList.Count == 20;
    bool isThereMatches => fullGame.MatchesList == null || fullGame.MatchesList.Count == 0;
    bool isSaveButtonDisabled => string.IsNullOrEmpty(GameInstruction) || string.IsNullOrEmpty(GameFullName);
    bool isReturnButtonDisabled => string.IsNullOrEmpty(GameFullName) || string.IsNullOrEmpty(GameInstruction);
    bool showWarningMessage = false;
    bool isDeleteButtonClicked = false;
    bool isNameAndInstructionExist = false;
    bool isEditMode = false;
    bool isReturnPublishClicked = false;
    bool isPublishAndReturn = false;
    bool isNoGameName = false;
    bool isNoGameIntruction = false;
    bool IsButtonDisabled => string.IsNullOrEmpty(currentMatchToShow.SecondMatch) || string.IsNullOrEmpty(currentMatchToShow.FirstMatch);
    bool isInsExist = false;
    bool isFirstImage = false;
    bool isMouseOver = false;
    bool isChanging = false;
    int characterLimit = 15;
    int characterGameNameLimit = 17;
    int characterGameInstructionLimit = 23;
    int characterCountFirst = 0;
    int characterCountSecond = 0;
    int characterCountGameName = 0;
    int characterCountInstruction = 0;
    int currentMatchIndex = 0;
    long maxFileSize = 4194304;





    //MatchToUpdate newMatch;
    //GameToUpdate gameToReturn1;
    //List<MatchToUpdate> allMatches;
    //List<MatchToUpdate> allMatches = new List<MatchToUpdate>();


    MatchToUpdate newMatch = new MatchToUpdate();
    MatchToUpdate currentMatchToShow = new MatchToUpdate();
    MatchToShow updatedMatchToShow = new MatchToShow();
    MatchToShow matchToDelete;
    MatchToEdit editMatch = new MatchToEdit();
    gameInsrtuctionToInsert gameWithInstruction = new gameInsrtuctionToInsert();
    GameToShow fullGame = new GameToShow();
    GameForEditor game1;

    protected async Task AreConditionsMet()
    {

        if (fullGame.MatchesList.Count >= 5)
        {
            isEnoughMathces = true;

        }
        else
        {
            isEnoughMathces = false;
            isPublish = true;

    @*await publish("Not Eligible");*@

        }

        if (!string.IsNullOrEmpty(GameInstruction) && !string.IsNullOrEmpty(GameFullName))
        {
            isNameAndInstraction = true;
        }
        else
        {
            isNameAndInstraction = false;
        }

        if (isNameAndInstraction && isEnoughMathces)
        {
    @*isPublish = false;*@
            if (fullGame.PublishStatus == "Not Eligible")
            {
                await publish("Eligible");
                isPublish = false;
                publishClasStyle = "disabled-publish-button";

            }
            if (fullGame.PublishStatus == "Eligible")
            {
                isPublish = false;
                publishClasStyle = "abled-publish-button";


            }

        }
        else
        {
            isPublish = true;

            if (fullGame.PublishStatus != "Not Eligible")
            {
                await publish("Not Eligible");

            }

        }

        publishBtnDisplay(fullGame.PublishStatus);

    }

    void Navigate()
    {

        Nav.NavigateTo("./", true);
    }

    void navigateToGameAfterPublish()
    {
        nav.NavigateTo("./game");
    }

    void closedReturnPopUp()
    {
        isReturnClicked = false;
        isDeleteButtonClicked = false;
        isPublishAndReturn = true;

    }

    void changeEditStyle()
    {
        isEditMode = false;
    }

    void makeToggle(bool isFirstCircleClicked)
    {
        if (isFirstCircleClicked)
        {
            textChanged = !textChanged;
        }
        else
        {
            text2Changed = !text2Changed;
        }
    }


    private void OnMouseOver(bool isOver)
    {

        isMouseOver = isOver;
    }


    private void navigateToGamesScreen(bool value)
    {
        isPublishAndReturn = value;

        if (isPublishAndReturn)
        {
            isReturnPublishClicked = false;
        }
        else
        {
            if (string.IsNullOrEmpty(fullGame.GameInstruction))
            {
                isInsExist = true;
            }
            nav.NavigateTo("./GamesList/" + isInsExist);
        }
    }

    void showMessageReturn()
    {
        isReturnClicked = true;
        isReturnPublishClicked = false;

    }

    //void showMessageDelete()
    //{

    //    isReturnPublishClicked = false;
    //    isDeleteButtonClicked = true;
    //}

    protected async Task publish(string newStatus)
    {
        isCancelPublishClicked = false;

        GamePublish gameToPublishInEdit = new GamePublish();
        gameToPublishInEdit.ID = newGameID;
        gameToPublishInEdit.PublishStatus = newStatus;
        fullGame.PublishStatus = newStatus;


        var userRes = await Http.PostAsJsonAsync("api/Games/" + UserId + "/publishGame", gameToPublishInEdit);

        if (userRes.IsSuccessStatusCode)
        {
            GameForEditor GameoShow = userRes.Content.ReadFromJsonAsync<GameForEditor>().Result;
            gameCodeToShow = GameoShow.GameCode.ToString();
            if (gameToPublishInEdit.PublishStatus == "Published")
            {
                publishBtnValue = "פורסם";
                isPublish = true;
                isReturnPublishClicked = true;
            }
            else if (gameToPublishInEdit.PublishStatus == "Eligible")
            {
                publishBtnValue = "פרסם";
                isPublish = false;

            }
            else
            {
                publishBtnValue = "פרסם";
                isPublish = true;
            }


            if (!isCancelPublishClicked)
            {
                publishClasStyle = "abled-publish-button";

            }

        }

        else
        {
            string error = userRes.Content.ReadAsStringAsync().Result;

            switch (error)
            {
                case "No Session":
                    msg = " עבר זמן רב ללא שימוש באתר, אנא רענן את העמוד";
                    break;

                case "User Not Logged In":
                    msg = "אינך מחובר למערכת, התחבר וטען את העמוד מחדש";
                    break;

                case "It's Not Your Game":
                    msg = "המשחק אותו אתה מנסה לעדכן אינו משוייך למשתמש שלך. ";
                    break;
            }
        }
    }

    protected async Task AddMatch(MatchToUpdate newMatchForIdentify)
    {

        if (editMatch.ID > 0) // EDIT MATCH
        {
            newMatchForIdentify.GameID = newGameID;


            var UpdatedMatch = await Http.PostAsJsonAsync("api/Matches/" + UserId + "/EditMatch", newMatchForIdentify);

            if (UpdatedMatch.IsSuccessStatusCode)
            {
                MatchToUpdate match1 = UpdatedMatch.Content.ReadFromJsonAsync<MatchToUpdate>().Result;

                editMatch.FirstMatch = match1.FirstMatch;
                editMatch.SecondMatch = match1.SecondMatch;
                editAvailable = false;

                foreach (MatchToShow updatedMatch1 in fullGame.MatchesList)
                {
                    if (updatedMatch1.ID == editMatch.ID)
                    {
                        int index = fullGame.MatchesList.IndexOf(updatedMatch1);
                        fullGame.MatchesList[index].ID = editMatch.ID;
                        fullGame.MatchesList[index].FirstMatch = editMatch.FirstMatch;
                        fullGame.MatchesList[index].SecondMatch = editMatch.SecondMatch;

                    }
                }

                currentMatchToShow = new MatchToUpdate();
                editMatch = new MatchToEdit();
                newMatch = new MatchToUpdate();
                //MakeDeleteList();
                if (DeletedMatch1Images.Count > 0)
                {
                    DeletedMatch1Images.RemoveAt(DeletedMatch1Images.Count - 1);
                    if (DeletedMatch1Images.Count >= 1)
                    {
                        await DeleteImage(DeletedMatch1Images);
                    }
                }
                if (DeletedMatch2Images.Count > 0)
                {
                    DeletedMatch2Images.RemoveAt(DeletedMatch2Images.Count - 1);

                    if (DeletedMatch2Images.Count >= 1)
                    {
                        await DeleteImage(DeletedMatch2Images);
                    }

                }
                myFileImage1 = "";
                myFileImage2 = "";
                isEditMode = true;
                currentMatchIndex = 0;

                await AreConditionsMet();

            }
            else
            {
                string error = UpdatedMatch.Content.ReadAsStringAsync().Result;

                switch (error)
                {
                    case "No Session":
                        msg = " עבר זמן רב ללא שימוש באתר, אנא רענן את העמוד";
                        break;

                    case "User Not Logged In":
                        msg = "אינך מחובר למערכת, התחבר וטען את העמוד מחדש";
                        break;

                    case "update match faild":
                        msg = "עדכון התאמה נכשל";
                        break;
                }
            }
        }
        else // NEW MATCH
        {
            newMatchForIdentify.GameID = newGameID;

            var AddMatch = await Http.PostAsJsonAsync("api/Matches/" + UserId + "/AddMatch", newMatchForIdentify);

            if (AddMatch.IsSuccessStatusCode)
            {
                MatchToShow match1 = AddMatch.Content.ReadFromJsonAsync<MatchToShow>().Result;
                fullGame.MatchesList.Add(match1);
                currentMatchToShow = new MatchToUpdate();
                newMatch = new MatchToUpdate();
                //MakeDeleteList();
                if (DeletedMatch1Images.Count > 0)
                {
                    DeletedMatch1Images.RemoveAt(DeletedMatch1Images.Count - 1);
                    if (DeletedMatch1Images.Count > 0)
                    {
                        await DeleteImage(DeletedMatch1Images);
                    }

                }
                if (DeletedMatch2Images.Count > 0)
                {
                    DeletedMatch2Images.RemoveAt(DeletedMatch2Images.Count - 1);
                    if (DeletedMatch2Images.Count > 0)
                    {
                        await DeleteImage(DeletedMatch2Images);
                    }

                }
                myFileImage1 = "";
                myFileImage2 = "";
                await AreConditionsMet();
            }

            else
            {
                string error = AddMatch.Content.ReadAsStringAsync().Result;

                switch (error)
                {
                    case "No Session":
                        msg = " עבר זמן רב ללא שימוש באתר, אנא רענן את העמוד";
                        break;

                    case "User Not Logged In":
                        msg = "אינך מחובר למערכת, התחבר וטען את העמוד מחדש";
                        break;

                    case "User Not Found":
                        msg = "פרטי המשתמש לא נמצאו, טען את העמוד מחדש ונסה שוב ";
                        break;

                    case "Match not created":
                        msg = "ניסיון שמירת ההתאמה נכשל, נסה שוב";
                        break;

                    case "Match not found":
                        msg = "התאמה לא נמצאה, נסה שוב";
                        break;


                }
            }
        }
    }

    void publishBtnDisplay(string status)
    {
        if (status == "Published")
        {
            publishBtnValue = "פורסם";
            isPublish = true;
            publishClasStyle = "afterPublish";
        }
        else if (status == "Eligible")
        {
            publishBtnValue = "פרסם";
            isPublish = false;
            publishClasStyle = "abled-publish-button";

        }
        else
        {
            publishBtnValue = "פרסם";
            isPublish = true;
            publishClasStyle = "disabled-publish-button";

        }
    }
    protected override async Task OnInitializedAsync()
    {
        characterCountGameName = GameFullName.Length;

        var ShowGameRes = await Http.GetAsync("api/Games/" + UserId + "/FullGameToEdit/" + newGameID);

        if (ShowGameRes.IsSuccessStatusCode)
        {
            fullGame = ShowGameRes.Content.ReadFromJsonAsync<GameToShow>().Result;
            GameInstruction = fullGame.GameInstruction;
            publishBtnDisplay(fullGame.PublishStatus);

            if (!string.IsNullOrEmpty(fullGame.GameInstruction))
            {
                isNameAndInstructionExist = true;
                characterCountInstruction = GameInstruction.Length;
            }

            await AreConditionsMet();

        }
        else
        {
            string error = ShowGameRes.Content.ReadAsStringAsync().Result;

            switch (error)
            {
                case "No Session":
                    msg = " עבר זמן רב ללא שימוש באתר, אנא רענן את העמוד";
                    break;

                case "User Not Logged In":
                    msg = "אינך מחובר למערכת, התחבר וטען את העמוד מחדש";
                    break;

                case "Game not found":
                    msg = "משחק לא נמצא ";
                    break;
            }
        }
    }


    private async Task UploadFile(InputFileChangeEventArgs e, bool isFirstImg)
    {

        var imageFiles = e.GetMultipleFiles();
        var file1 = e.File;



        foreach (var file in imageFiles)
        {
            if (file.Size <= maxFileSize)
            {
                var buffer = new byte[file.Size];
                await file.OpenReadStream(maxFileSize).ReadAsync(buffer);
                var imageBase64 = Convert.ToBase64String(buffer);
                var saveResponse = await Http.PostAsJsonAsync("api/Media/upload", imageBase64);

                if (saveResponse.IsSuccessStatusCode)
                {
                    string resizeUrl = saveResponse.Content.ReadAsStringAsync().Result;

                    if (isFirstImg)
                    {
                        myFileImage1 = "uploadedFiles/" + resizeUrl;
                        isFirstImage = isFirstImg;
                        unacceptedImg = "";
                        firstImgTooBig = "";
                        MakeDeleteList();
                    }
                    else
                    {
                        myFileImage2 = "uploadedFiles/" + resizeUrl;
                        isFirstImage = isFirstImg;
                        unacceptedImg2 = "";
                        secondImgTooBig = "";
                        MakeDeleteList();
                    }
                }
                else
                {
                    if (isFirstImg)
                    {
                        if (!IsFileAccepted(file1))
                        {
                            unacceptedImg = "התמונה שבחרת לא בפורמט נתמך. יש לבחור תמונה בפורמט PNG או JPEG";
                            return;
                        }
                    }
                    else
                    {
                        if (!IsFileAccepted(file1))
                        {
                            unacceptedImg2 = "התמונה שבחרת לא בפורמט נתמך. יש לבחור תמונה בפורמט PNG או JPEG";
                            return;
                        }
                    }
                }
            }
            else
            {
                if (isFirstImg)
                {
                    firstImgTooBig = "התמונה שניסית להעלות כבדה מדיי, בחר תמונה אחרת";

                }
                else
                {
                    secondImgTooBig = "התמונה שניסית להעלות כבדה מדיי, בחר תמונה אחרת";

                }

            }
        }

    }

    private bool IsFileAccepted(IBrowserFile fileExepted)
    {
        // Perform client-side validation by checking the file type.
        return fileExepted.ContentType == "image/png" || fileExepted.ContentType == "image/jpeg";
    }

    List<string> DeletedMatch1Images = new List<string>();
    List<string> DeletedMatch2Images = new List<string>();

    private void MakeDeleteList() // הוספת שם התמונה לרשימת התמונות הכוללת המועמדת למחיקה- לא מחיקה בפועל מהדאטה בייס
    {
        if (!string.IsNullOrEmpty(myFileImage1) && isFirstImage)
        {
            if (!DeletedMatch1Images.Contains(myFileImage1))
            {
                DeletedMatch1Images.Add(myFileImage1);
            }
        }
        if (!string.IsNullOrEmpty(myFileImage2) && !isFirstImage)
        {
            if (!DeletedMatch1Images.Contains(myFileImage2))
            {
                DeletedMatch2Images.Add(myFileImage2);
            }
        }
    }

    private async Task DeleteImage(List<string> DeletedMatchList)
    {

        var saveResponse = await Http.PostAsJsonAsync("api/Media/deleteImages", DeletedMatchList);

        if (saveResponse.IsSuccessStatusCode)
        {
            Console.WriteLine("התמונות נמחקו בהצלחה");

            DeletedMatchList.Clear();
        }
        else
        {
            errorDeleteImgmsg = "בעיה במחיקה, נסה שוב ";

        }
    }


    protected async Task updateNameAndInstruction(gameInsrtuctionToInsert gameInsrtucToInsert)
    {
        gameInsrtucToInsert.ID = newGameID;
        gameInsrtucToInsert.GameFullName = GameFullName;
        gameInsrtucToInsert.GameInstruction = GameInstruction;

        var userRes = await Http.PostAsJsonAsync("api/Matches/" + UserId + "/addInstruction", gameInsrtucToInsert);

        if (userRes.IsSuccessStatusCode)
        {
            //משתנה שיפעיל אנימציה של וי
            SettingMsg = "";
            isSaveBtnClicked = true;
            isNameAndInstructionExist = true;
            await AreConditionsMet();
        }

        else
        {
            string error = userRes.Content.ReadAsStringAsync().Result;

            switch (error)
            {
                case "No Session":
                    SettingMsg = " עבר זמן רב ללא שימוש באתר, אנא רענן את העמוד";
                    break;

                case "User Not Logged In":
                    SettingMsg = "אינך מחובר למערכת, התחבר וטען את העמוד מחדש";
                    break;

                case "It's Not Your Game":
                    SettingMsg = "המשחק אותו אתה מנסה לעדכן אינו משוייך למשתמש שלך. ";
                    break;

                case "update Game Instruction failed":
                    SettingMsg = "עדכון הנחיית המשחק נכשל, נסה שוב";
                    break;

                case "update game name failed":
                    SettingMsg = "עדכון שם המשחק נכשל, נסה שוב";
                    break;
            }
        }
    }

    void deleteButtonClicked(MatchToShow m)
    {
        matchToDelete = m;
        isDeleteButtonClicked = true;
    }

    protected async Task DeleteMatchRow(MatchToShow matchRowToDelete)
    {
        matchRowToDelete = matchToDelete;
        DeletedMatch1Images.Clear();
        DeletedMatch2Images.Clear();

        string extension = Path.GetExtension(matchRowToDelete.FirstMatch);
        string extension2 = Path.GetExtension(matchRowToDelete.SecondMatch);

        if (extension != null)
        {
            string fileExtension = extension.ToLower();

            if (fileExtension == ".jpg" || fileExtension == ".jpeg" || fileExtension == ".png")
            {
                DeletedMatch1Images.Add(matchRowToDelete.FirstMatch);
            }
        }

        if (extension2 != null)
        {
            string fileExtension2 = extension2.ToLower();

            if (fileExtension2 == ".jpg" || fileExtension2 == ".jpeg" || fileExtension2 == ".png")
            {
                DeletedMatch1Images.Add(matchRowToDelete.SecondMatch);
            }
        }

        var deleteMatchResponse = await Http.DeleteAsync("api/Matches/" + UserId + "/DeleteMatch" + "/" + matchRowToDelete.ID);
        if (deleteMatchResponse.IsSuccessStatusCode)
        {
            fullGame.MatchesList.Remove(matchRowToDelete);
            isDeleteButtonClicked = false;
            await DeleteImage(DeletedMatch1Images);
            await DeleteImage(DeletedMatch2Images);
            if (currentMatchToShow.FirstMatch == matchRowToDelete.FirstMatch && currentMatchToShow.SecondMatch == matchRowToDelete.SecondMatch)
            {
                currentMatchToShow.FirstMatch = "";
                currentMatchToShow.SecondMatch = "";
                myFileImage1 = "";
                myFileImage2 = "";
                editAvailable = false;
            }


            await AreConditionsMet();

        }

        else
        {
            string error = deleteMatchResponse.Content.ReadAsStringAsync().Result;

            switch (error)
            {
                case "No Session":
                    msg = " עבר זמן רב ללא שימוש באתר, אנא רענן את העמוד";
                    break;

                case "User Not Logged In":
                    msg = "אינך מחובר למערכת, התחבר וטען את העמוד מחדש";
                    break;

                case "Failed to delete match":
                    msg = "מחיקת התאמה נכשלה, נסה שוב";
                    break;
            }
        }


    }

    protected async Task EditMatchRow(int matchIdToEdit)
    {
        editAvailable = true;
        currentMatchIndex = matchIdToEdit;

        var editMatchResponse = await Http.GetAsync("api/Matches/" + UserId + "/TempEdit" + "/" + matchIdToEdit);
        if (editMatchResponse.IsSuccessStatusCode)
        {
            editMatch = editMatchResponse.Content.ReadFromJsonAsync<MatchToEdit>().Result;
            currentMatchToShow.ID = editMatch.ID;
            currentMatchToShow.FirstMatch = editMatch.FirstMatch;
            currentMatchToShow.FirstIsText = editMatch.FirstIsText;
            currentMatchToShow.SecondMatch = editMatch.SecondMatch;
            currentMatchToShow.SecondIsText = editMatch.SecondIsText;
            if (!editMatch.FirstIsText)
            {
                textChanged = true;
                isFirstImage = true;
                myFileImage1 = currentMatchToShow.FirstMatch;
                currentFirstEdit = myFileImage1;
                MakeDeleteList();

            }
            else
            {
                textChanged = false;
                characterCountFirst = editMatch.FirstMatch.Length;
                currentFirstEdit = currentMatchToShow.FirstMatch;
            }

            if (!editMatch.SecondIsText)
            {
                text2Changed = false;
                isFirstImage = false;
                myFileImage2 = currentMatchToShow.SecondMatch;
                currentSecondEdit = myFileImage2;
                MakeDeleteList();

            }
            else
            {
                text2Changed = true;
                characterCountSecond = editMatch.SecondMatch.Length;
                currentSecondEdit = currentMatchToShow.SecondMatch;

            }
            //textChanged = editMatch.FirstIsText;
            //text2Changed = !editMatch.SecondIsText;
        }

        else
        {
            string error = editMatchResponse.Content.ReadAsStringAsync().Result;

            switch (error)
            {
                case "No Session":
                    msg = " עבר זמן רב ללא שימוש באתר, אנא רענן את העמוד";
                    break;

                case "User Not Logged In":
                    msg = "אינך מחובר למערכת, התחבר וטען את העמוד מחדש";
                    break;

                case "Pulling match Failed":
                    msg = "משיכת ההתאמה ממאגר הנתונים נכשלה, נסה שוב";
                    break;
            }
        }
    }

    protected async Task returnToHome()
    {
        GameToUpdate gameToReturn1 = new GameToUpdate();
        gameToReturn1.ID = fullGame.ID;
        gameToReturn1.GameFullName = GameFullName;
        gameToReturn1.PublishStatus = fullGame.PublishStatus;
        gameToReturn1.GameInstruction = GameInstruction;


        var userResRETURN = await Http.PostAsJsonAsync("api/Games/" + UserId + "/EditGame", gameToReturn1);

        if (userResRETURN.IsSuccessStatusCode)
        {
            //משתנה שיפעיל אנימציה של וי
            SettingMsg = "dfklmhdgjnfgsdlkf";
            if (string.IsNullOrEmpty(fullGame.GameInstruction))
            {
                isInsExist = true;
            }
            nav.NavigateTo("./GamesList/" + isInsExist);

        }

        else
        {
            string error = userResRETURN.Content.ReadAsStringAsync().Result;

            switch (error)
            {
                case "No Session":
                    SettingMsg = " עבר זמן רב ללא שימוש באתר, אנא רענן את העמוד";
                    break;

                case "User Not Logged In":
                    SettingMsg = "אינך מחובר למערכת, התחבר וטען את העמוד מחדש";
                    break;

                case "update game faild":
                    SettingMsg = "ניסיון החזרה למסך המשחקים נכשל, נסה שוב ";
                    break;


            }
        }
    }

    protected async Task cancleChanges(int matchToReload)
    {
        if (DeletedMatch1Images.Count > 1)
        {
            string firstImgInList = DeletedMatch1Images[0];
            DeletedMatch1Images.Remove(DeletedMatch1Images[0]);

            await DeleteImage(DeletedMatch1Images);

        }

        if (DeletedMatch2Images.Count > 1)
        {
            string firstImgInList2 = DeletedMatch2Images[0];
            DeletedMatch2Images.Remove(DeletedMatch2Images[0]);

            await DeleteImage(DeletedMatch2Images);

        }

        await EditMatchRow(matchToReload);
    }

    async Task HandleInput(ChangeEventArgs e, string field)
    {
        var inputText = (string)e.Value;

        if (field == "first")
        {
            currentMatchToShow.FirstMatch = inputText;
            characterCountFirst = currentMatchToShow.FirstMatch.Length;

        }

        else if (field == "second")
        {
            currentMatchToShow.SecondMatch = inputText;
            characterCountSecond = currentMatchToShow.SecondMatch.Length;
        }

        else if (field == "gameName")
        {
            GameFullName = inputText;
            characterCountGameName = GameFullName.Length;
            if (characterCountGameName == 0)
            {
                isNoGameName = true;
            }
            else
            {
                isNoGameName = false;
            }

        }
        else if (field == "gameInstruction")
        {
            GameInstruction = inputText;
            characterCountInstruction = GameInstruction.Length;
            if (string.IsNullOrEmpty(inputText) && !string.IsNullOrEmpty(previousValue))
            {
                showWarningMessage = true;
            }
            else
            {
                showWarningMessage = false;
                isNoGameIntruction = true;
            }
            previousValue = inputText;
        }

        await AreConditionsMet();
    }
}