@page "/GamesList"
@using TriangleProject.Shared.Models.Editor
@using TriangleProject.Shared.Models.Matches
@using TriangleProject.Shared.Models.Portelem

@inject HttpClient Http

<h3>GamesList</h3>

@if (user != null)
{

    <input type="text" @bind="gameName" />
    <br />
    <input type="button" value="Create Game" @onclick=@(()=>AddNewGame(UserId, gameName))>


    <p>The Games:</p>
    <table border=0>
        <tr>
            <th>ID</th>
            <th>Game Name</th>
            <th>Game Code</th>
            <th>Publish</th>
        </tr>

        @foreach (GameForEditor game in user.UserGames)
        {
            <tr>
                <td>@game.GameFullName</td>
                <td>@game.GameCode</td>
                <td>
                    @if (game.PublishStatus == "Not Eligible")
                    {
                        <input type="checkbox" disabled />
                        <input type="button" value="Delete" @onclick="(() =>DeleteGame(game))" />
                        <input type="button" value="Update" @onclick="(() =>DeleteGame(game))" />

                    }
                    else if (game.PublishStatus == "Eligible")
                    {
                        <input type="checkbox" @onchange="(()=> changePublish(game))" />
                    }
                    else
                    {
                        <input type="checkbox" checked @onchange="(()=> changePublish(game))" />
                    }
                </td>
            </tr>
        }


    </table>

}

@inject NavigationManager Nav

@if (msg != "")
{
    <p>@msg</p>
    <input type="button" value="reload" @onclick=Navigate />
}


@code {

    [CascadingParameter]
    public int UserId { get; set; }

    UserWithGames user;
    List<GameForEditor> newGame;

    string msg = "";
    string gameName = "";

    void Navigate()
    {
        Nav.NavigateTo("./", true);
    }

    protected override async Task OnInitializedAsync()
    {
        var userRes = await Http.GetAsync("api/Games/" + UserId);

        if (userRes.IsSuccessStatusCode)
        {
            user = userRes.Content.ReadFromJsonAsync<UserWithGames>().Result;
        }
        else
        {
            string error = userRes.Content.ReadAsStringAsync().Result;
            switch (error)
            {
                case "No Session":
                    msg = "Session error, please reload page";
                    break;
                case "User Not Logged In":
                    msg = "You are not logged in, please reload page to try again";
                    break;
                case "User Not Found":
                    msg = "the user details not found, please reload page to try again";
                    break;
            }
        }
    }

    protected async Task AddNewGame(int UserId, string gameName)
    {
        var AddResopnse = await Http.GetAsync("api/Games/" + UserId + "/addGame/" + gameName);

        if (AddResopnse.IsSuccessStatusCode)
        {

            GameForEditor newGame = AddResopnse.Content.ReadFromJsonAsync<GameForEditor>().Result;
            user.UserGames.Add(newGame);


        }
        else
        {
            string error = AddResopnse.Content.ReadAsStringAsync().Result;

            switch (error)
            {
                case "No Session":
                    msg = "Session error, please reload page";
                    break;

                case "User Not Logged In":
                    msg = "You are not logged in, please reload page to try again";
                    break;

                case "User Not Found":
                    msg = "You tried to update a game that is not associated with your user ";
                    break;

                case "Game not created":
                    msg = "The game you have tried to create, faild.";
                    break;
            }
        }
    }


    protected async Task changePublish(GameForEditor game)
    {
        GamePublish gameToSend = new GamePublish();
        gameToSend.ID = game.ID;
        gameToSend.PublishStatus = game.PublishStatus;

        if (gameToSend.PublishStatus == "Eligible")
        {
            gameToSend.PublishStatus = "Published";
        }
        else
        {
            gameToSend.PublishStatus = "Eligible";
        }

        var userRes = await Http.PostAsJsonAsync("api/Games/" + UserId + "/publishGame", gameToSend);

        if (userRes.IsSuccessStatusCode)
        {
            int index = user.UserGames.IndexOf(game);
            if (user.UserGames[index].PublishStatus == "Eligible")
            {
                user.UserGames[index].PublishStatus = "Published";
            }
            else
            {
                user.UserGames[index].PublishStatus = "Eligible";
            }

        }

        else
        {
            string error = userRes.Content.ReadAsStringAsync().Result;

            switch (error)
            {
                case "No Session":
                    msg = "Session error, please reload page";
                    break;

                case "User Not Logged In":
                    msg = "You are not logged in, please reload page to try again";
                    break;

                case "It's Not Your Game":
                    msg = "You tried to update a game that is not associated with your user ";
                    break;
            }

        }
    }


    protected async Task DeleteGame(GameForEditor gameToDelte)
    {

        var deleteResponse = await Http.DeleteAsync("api/Games/" + UserId + "/" + gameToDelte.ID);
        if (deleteResponse.IsSuccessStatusCode)
        {
            user.UserGames.Remove(gameToDelte);
        }

        else
        {
            string error = deleteResponse.Content.ReadAsStringAsync().Result;

            switch (error)
            {
                case "No Session":
                    msg = "Session error, please reload page";
                    break;

                case "User Not Logged In":
                    msg = "You are not logged in, please reload page to try again";
                    break;

                case "Failed to delete game":
                    msg = "The game deleting process was failed ";
                    break;

                case "Failed to delete matches":
                    msg = "The matches deleting process was failed ";
                    break;

                    
            }
        }
        

    }

}