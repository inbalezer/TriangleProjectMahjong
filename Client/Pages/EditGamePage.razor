@page "/EditGamePage/{GameFullName}/{newGameID:int}"
@using TriangleProject.Shared.Models.Editor
@using TriangleProject.Shared.Models.Matches
@using TriangleProject.Shared.Models.Portelem
@using TriangleProject.Client.Components
@using System.ComponentModel.DataAnnotations;
@using Microsoft.AspNetCore.Components.Forms;

@inject HttpClient Http
@inject NavigationManager Nav
@inject NavigationManager nav


<h3>עריכת משחק @GameFullName</h3>
<div class="custom-tooltip" title="לא ניתן לחזור למסך המשחקים ללא שם משחק.">

    <button style="background-color:pink" @onclick="returnToHome" disabled="@isReturnButtonDisabled">חזור</button>
</div>


<table style="border:double">
    <tr>
        <th>"הגדרות כלליות"</th>
    </tr>
    <tr>
        <div class="character-count-input">

            :שם המשחק <input maxlength="17" style="border:2px solid blue" type="text" @bind="GameFullName" @oninput='e => HandleInput(e, "gameName")' />
            <p>(1-17 תווים)</p>


            @if (!string.IsNullOrEmpty(GameFullName))
            {
                <span class="character-count"> @characterCountGameName / @characterGameNameLimit </span>
            }
            @if (GameFullName == "")
            {
                <span>לא ניתן לשמור משחק ללא שם.</span>
            }
        </div>
    </tr>
    <tr>
        <div class="character-count-input">
            :הנחיית משחק  לחצו והתאימו בין
            <input maxlength="50" style="border:2px solid blue" type="text" @bind="GameInstruction" @oninput='e => HandleInput(e, "gameInstruction")' /> ורוקנו את הלוח

            <p>(1-50 תווים)</p>


            @if (!string.IsNullOrEmpty(GameInstruction))
            {
                <span class="character-count"> @characterCountInstruction / @characterGameInstructionLimit </span>
            }
            @if (showWarningMessage)
            {
                <span class="warning-message">You need to fill the text box</span>
            }
        </div>

    </tr>


</table>

@*<input type="button" value="שמור" @onclick=Navigate />*@

<MudButton value="שמור" @onclick="(() => updateNameAndInstruction(gameWithInstruction))" Color="Color.Primary" disabled="@isSaveButtonDisabled"> +שמור </MudButton>



<p>הוספת זוגות</p>

@if (isNameAndInstructionExist)
{
    @if (!isLimitMatches)
    {
        <EditForm Model="currentMatchToShow" OnValidSubmit="(() =>AddMatch(currentMatchToShow))">
            <DataAnnotationsValidator />

            <p>:התאמה ראשונה</p>
            <InputCheckbox style="background-color:aquamarine" @bind-Value="textChanged" />

            @if (!textChanged)
            {
                @if (editMatch.ID == 0)
                {
                    currentMatchToShow = newMatch;
                }
                currentMatchToShow.FirstIsText = true;
                Console.WriteLine(currentMatchToShow.FirstMatch);

                if (currentMatchToShow.FirstMatch != "")
                {
                    currentValue = currentMatchToShow.FirstMatch;

                    if (currentMatchToShow.FirstMatch != null)
                    {
                        if (currentMatchToShow.FirstMatch.Contains("uploadedFiles/"))
                        {
                            currentMatchToShow.FirstMatch = priviousValue;
                            Console.WriteLine("priviousValue" + priviousValue);

                        }
                        else
                        {
                            currentMatchToShow.FirstMatch = currentValue;


                        }
                    }

                }
                <div class="character-count-input">
                    <input maxlength="15" style="border:2px solid blue" type="text" @bind="currentMatchToShow.FirstMatch" @oninput='e => HandleInput(e, "first")' />

                    <p style="color:red"> ניתן להכניס בין 1-15 תווים </p>

                    @if (!string.IsNullOrEmpty(currentMatchToShow.FirstMatch))
                    {
                        <span class="character-count"> @characterCountFirst / @characterLimit </span>
                    }
                </div>
            }
            else
            {

                priviousValue = currentMatchToShow.FirstMatch;
                currentMatchToShow.FirstIsText = false;
                if (myFileImage1 != "")
                {
                    currentMatchToShow.FirstMatch = myFileImage1;
                    <div class="custom-input-file">
                        <label for="FileInputID">שנה תמונה</label>
                    </div>
                }
                else
                {
                    <div class="custom-input-file">
                        <label for="FileInputID">העלה תמונה</label>
                    </div>
                }

                @*<label for="FileInֵputID"> העלה תמונה</label>*@
                @*<InputFile id="FileInputID" accept="image/png, image/jpeg" OnChange="((e) => UploadFile(e, true))" class="custom-input-file"></InputFile>*@
                <div class="custom-input-file">
                    <InputFile id="FileInputID" accept="image/png, image/jpeg" OnChange="((e) => UploadFile(e, true))"></InputFile>

                </div>
                <p style="color:red"> קבצי Png ,Jpeg בלבד </p>

                if (unacceptedImg != "")
                {
                    <span>@unacceptedImg</span>
                }

                <br />
                @if (myFileImage1 != "")
                {
                    <img src="@myFileImage1" width="150" />
                    @*<input type="button" value="העבר למחיקה " @onclick="MakeDeleteList" />*@
                }
            }

            <p>:התאמה שניה</p>
            <InputCheckbox style="background-color:aquamarine" @bind-Value="text2Changed" />

            @if (!text2Changed)
            {
                priviousValue2 = currentMatchToShow.SecondMatch;

                @if (editMatch.ID == 0)
                {
                    currentMatchToShow = newMatch;
                }

                currentMatchToShow.SecondIsText = false;
                if (myFileImage2 != "")
                {
                    currentMatchToShow.SecondMatch = myFileImage2;
                    <div class="custom-input-file">
                        <label for="FileInputID2">שנה תמונה</label>
                    </div>
                }
                else
                {
                    <div class="custom-input-file">
                        <label for="FileInputID2">העלה תמונה</label>
                    </div>
                }
                @*<label for="FileInֵputID"> העלה תמונה</label>
                    <InputFile id="FileInputID" accept="image/png, image/jpeg" OnChange="((e) => UploadFile(e, false))"></InputFile>*@
                <div class="custom-input-file">
                    <InputFile id="FileInputID2" accept="image/png, image/jpeg" OnChange="((e) => UploadFile(e, false))"></InputFile>

                </div>
                <p style="color:red"> קבצי Png ,Jpeg בלבד </p>
                if (unacceptedImg != "")
                {
                    <span>@unacceptedImg</span>
                }
                <br />
                @if (myFileImage2 != "")
                {
                    <img src="@myFileImage2" width="150" />
                    @*<input type="button" value="העבר למחיקה " @onclick="MakeDeleteList" />*@
                }


            }
            else
            {
                currentValue2 = newMatch.SecondMatch;
                currentMatchToShow.SecondIsText = true;


                if (currentMatchToShow.SecondMatch != "")
                {
                    if (currentValue2 != null)
                    {
                        if (!currentValue2.Contains("uploadedFiles/"))
                        {
                            newMatch.SecondMatch = currentValue2;

                        }
                        else
                        {
                            newMatch.SecondMatch = priviousValue2;
                            Console.WriteLine("empty");
                        }
                    }
                }
                <div class="character-count-input">
                    <input maxlength="15" style="border:2px solid blue" type="text" @bind="currentMatchToShow.SecondMatch"
                           @oninput='e => HandleInput(e, "second")' />
                    <p style="color:red"> ניתן להכניס בין 1-15 תווים </p>

                    @if (!string.IsNullOrEmpty(currentMatchToShow.SecondMatch))
                    {
                        <span class="character-count">Characters entered: @characterCountSecond / @characterLimit </span>
                    }
                </div>


            }

            @if (editAvailable)
            {
                <input type="button" value="בטל עריכה" style="background-color: peru" @onclick="@(async ()=> await EditMatchRow(currentMatchToShow.ID))" />
            }
            <br />

            <input type="submit" value="שמור זוג" disabled="@IsButtonDisabled" />
        </EditForm>
    }
    else
    {
        <div>
            אופס...
            נראה שהגעת לכמות הזוגות המקסימאלית.
            ניתן לשמור את המשחק ולחזור למסך המשחקים :)
        </div>
    }
}
else
{
    <div>
        רגע לפני שמתחילים...
        מלאו את הנחיית המשחק למעלה
        וקדימה- להוספת הזוגות :)
    </div>
}



<div>
    <p>מאגר הזוגות</p>
    @if (isThereMatches)
    {
        <span>
            מאגר הזוגות עדיין ריק
            לאחר השמירה, הזוגות יופיעו כאן :)
        </span>
    }
    else if (fullGame.MatchesList != null)
    {
        if (fullGame.MatchesList.Count <= 11 && fullGame.MatchesList.Count <= 18)
        {
            <span>סה"כ @fullGame.MatchesList.Count זוגות</span>

        }
        else if (fullGame.MatchesList.Count == 19)
        {
            <span>סה"כ @fullGame.MatchesList.Count זוגות</span>
            <span>שים לב, ניתן להוסיף רק עוד זוג אחד למאגר</span>

        }
        else
        {
            <span>סה"כ @fullGame.MatchesList.Count/@fullGame.MatchesList.Count זוגות</span>
        }

        @foreach (MatchToShow match in fullGame.MatchesList)
        {

            <MatchComp matchText="@match.FirstMatch" matchText2="@match.SecondMatch" uploadedImg="" uploadedImg2="" DeleteCallBack="(() => deleteButtonClicked(match))" EditMatchCallBack="@(async ()=> await EditMatchRow(match.ID))" isImageClickable=@isEditMode></MatchComp>

            if (isDeleteButtonClicked)
            {
                <PopupComp ShowMsg="closedReturnPopUp" Headline="@deleteHeadLinePopUp" Text1="@deleteTextPopUp1" GameIdToDelete="@(async () => await DeleteMatchRow(matchToDelete))" actionButtonText="מחק זוג " cancelButtonText="בטל"></PopupComp>

            }
        }

        @*@if(!isEditMode)
                {
            @class='@(isEditMode ? "disabled" : "")'
                }*@

        <input style="background-color:aquamarine" type="button" value="שמור וחזור למסך המשחקים" @onclick="@(async ()=> await returnToHome())" />
    }
</div>


@if (msg != "")
{
    <p>@msg</p>
    <input type="button" value="reload" @onclick=Navigate />
}

@if (myFileImage != "")
{
    <img src="@myFileImage" width="150" />
    <input type="button" value="העבר למחיקה " @onclick="MakeDeleteList" />
}


@if (DeletedImages.Count > 0)
{
    <ul>
        @foreach (string img in DeletedImages)
        {

            <li>@img     <img src="@img" width="50" /> </li>
        }
    </ul>

    <input type="button" value="מחק תמונות נבחרות " @onclick="DeleteImage" />
}

@if (SettingMsg != "")
{
    <p>@SettingMsg</p>
}


<p>@msg</p>

@if (fullGameMsg != "")
{
    <p>@fullGameMsg</p>
}
@if (isReturnClicked)
{
    <PopupComp Headline="@returnHeadLinePopUp" Text1="@returnTextPopUp1" GameIdToDelete="@(async () => await returnToHome())" ShowMsg="closedReturnPopUp" actionButtonText="שמור וחזור ל״משחקים שלי״ " cancelButtonText="בטל"></PopupComp>

}

<div style="background-color: white; width: 30%; box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2); border-radius: 5px;">

    <p>
        שם והנחיית המשחק
    </p>
    @if (isNameAndInstraction)
    {
        <p>--יש שם והוראה--</p>
    }
    <p>
        מינימום 5 זוגות
    </p>
    @if (isEnoughMathces)
    {
        <p>---יש 5 זוגות ומעלה---</p>
    }
</div>

<input type="button" style="background-color: peru" value="@publishBtnValue" disabled="@isPublish" @onclick="@(async ()=> await publish("Published"))" />

@if (publishBtnValue == "פורסם" && isReturnPublishClicked)
{
    <PopupComp Headline="פורסם בהצלחה!" Text1="איזה כיף, המשחק מחכה לך במסך המשחקים שלך. קוד המשחק הוא:" Text2="@gameCodeToShow" GameIdToDelete="navigateToGameAfterPublish" actionButtonText="למשחק" ShowMsg="closedReturnPopUp" cancelButtonText="חזור למסך המשחקים" xClicked="(value) => navigateToGamesScreen(value)"></PopupComp>

}




<style>
    .custom-input-file {
        position: relative;
        display: inline-block;
        overflow: hidden;
        border-radius: 5px;
    }

        .custom-input-file input[type="file"] {
            position: absolute;
            top: 0;
            left: 0;
            opacity: 0;
            width: 100%;
            height: 100%;
            cursor: pointer;
        }

        .custom-input-file label {
            display: inline-block;
            padding: 10px;
            background-color: blue;
            color: white;
            border-radius: 5px;
            cursor: pointer;
        }

    #disabled {
        pointer-events: none;
        opacity: 0.5;
    }
</style>

@code {

    [CascadingParameter]
    public int UserId { get; set; }

    [Parameter]
    public string GameFullName { get; set; }

    [Parameter]
    public int newGameID { get; set; }

    [Parameter]
    public bool updateMode { get; set; }

    string msg = "";
    string SettingMsg = "";
    string fullGameMsg = "";
    string returnHeadLinePopUp = "חזור למסך ״המשחקים שלי?";
    string returnTextPopUp1 = "אתה עומד לחזור למסך ״המשחקים שלי״.\nאם קיים זוג חדש שטרם שמרת, הוא לא ישמר. ";
    string deleteHeadLinePopUp = "מחיקת זוג";
    string deleteTextPopUp1 = "אתה עומד למחוק את הזוג. האם אתה בטוח?";
    string gameNameToReturn = "";
    string myFileImage = "";
    string myFileImage1 = "";
    string myFileImage2 = "";
    string GameInstruction = "";
    string currentValue = "";
    string currentValue2 = "";
    string publishBtnValue = "פרסם";
    string publishMsg = " איזה כיף, המשחק שלך מחכה לך במסך המשחקים";
    string unacceptedImg = "";
    string previousValue = "";
    string gameCodeToShow = "";
    string priviousValue = "";
    string priviousValue2 = "";

    @*string msg = "";*@
    bool FirstIsText;
    bool SecondIsText;
    bool isReturnClicked = false;
    bool isPublish = true;
    bool textChanged = false;
    bool text2Changed = false;
    bool showImg = false;
    bool editAvailable = false;
    bool isEnoughMathces = false;
    bool isNameAndInstraction = false;
    bool isLimitMatches => fullGame.MatchesList != null && fullGame.MatchesList.Count == 20;
    bool isThereMatches => fullGame.MatchesList == null || fullGame.MatchesList.Count == 0;
    bool isSaveButtonDisabled => string.IsNullOrEmpty(GameInstruction) || string.IsNullOrEmpty(GameFullName);
    bool isReturnButtonDisabled => string.IsNullOrEmpty(GameFullName);
    bool showWarningMessage = false;
    bool isDeleteButtonClicked = false;
    bool isNameAndInstructionExist = false;
    bool isEditMode = true;
    bool isReturnPublishClicked = false;
    bool isPublishAndReturn = false;
    bool IsButtonDisabled => string.IsNullOrEmpty(currentMatchToShow.SecondMatch) || string.IsNullOrEmpty(currentMatchToShow.FirstMatch);
    bool isInsExist = false;
    int characterLimit = 15;
    int characterGameNameLimit = 17;
    int characterGameInstructionLimit = 50;
    int characterCountFirst = 0;
    int characterCountSecond = 0;
    int characterCountGameName = 0;
    int characterCountInstruction = 0;
    long maxFileSize = 4194304;





    //MatchToUpdate newMatch;
    //GameToUpdate gameToReturn1;
    //List<MatchToUpdate> allMatches;
    //List<MatchToUpdate> allMatches = new List<MatchToUpdate>();


    MatchToUpdate newMatch = new MatchToUpdate();
    MatchToUpdate currentMatchToShow = new MatchToUpdate();
    MatchToShow updatedMatchToShow = new MatchToShow();
    MatchToShow matchToDelete;
    MatchToEdit editMatch = new MatchToEdit();
    gameInsrtuctionToInsert gameWithInstruction = new gameInsrtuctionToInsert();
    GameToShow fullGame = new GameToShow();
    GameForEditor game1;

    protected async Task AreConditionsMet()
    {

        if (fullGame.MatchesList.Count >= 5)
        {

            isEnoughMathces = true;


        }
        else
        {
            isEnoughMathces = false;
            isPublish = true;


            @*await publish("Not Eligible");*@

        }

        if (!string.IsNullOrEmpty(GameInstruction) && !string.IsNullOrEmpty(GameFullName))
        {

            isNameAndInstraction = true;
        }
        else
        {
            isNameAndInstraction = false;
        }

        if (isNameAndInstraction && isEnoughMathces)
        {
            isPublish = false;
            if (fullGame.PublishStatus != "Eligible")
            {
                await publish("Eligible");

            }

        }
        else
        {
            isPublish = true;

            if (fullGame.PublishStatus != "Not Eligible")
            {
                await publish("Not Eligible");

            }

        }
    }

    void Navigate()
    {

        Nav.NavigateTo("./", true);
    }

    void navigateToGameAfterPublish()
    {
        //nav.NavigateTo("./GamesList/");
    }

    void closedReturnPopUp()
    {
        isReturnClicked = false;
        isDeleteButtonClicked = false;
        isPublishAndReturn = true;

    }

    //void navigateToGamesScreen()
    //{
    //    if ()
    //    {
    //        nav.NavigateTo("./GamesList/");
    //    }
    //}

    private void navigateToGamesScreen(bool value)
    {
        isPublishAndReturn = value;

        if (isPublishAndReturn)
        {
            isReturnPublishClicked = false;
        }
        else
        {
            if (string.IsNullOrEmpty(fullGame.GameInstruction))
            {
                isInsExist = true;
            }
            nav.NavigateTo("./GamesList/" + isInsExist);
        }
    }

    void showMessage()
    {
        isReturnClicked = true;
        isReturnPublishClicked = false;
        isDeleteButtonClicked = true;
    }

    protected async Task publish(string newStatus)
    {
        GamePublish gameToPublishInEdit = new GamePublish();
        gameToPublishInEdit.ID = newGameID;
        gameToPublishInEdit.PublishStatus = newStatus;
        fullGame.PublishStatus = newStatus;


        var userRes = await Http.PostAsJsonAsync("api/Games/" + UserId + "/publishGame", gameToPublishInEdit);

        if (userRes.IsSuccessStatusCode)
        {
            GameForEditor GameoShow = userRes.Content.ReadFromJsonAsync<GameForEditor>().Result;
            gameCodeToShow = GameoShow.GameCode.ToString();
            if (gameToPublishInEdit.PublishStatus == "Published")
            {
                publishBtnValue = "פורסם";
                isPublish = true;
                isReturnPublishClicked = true;
            }
            else if (gameToPublishInEdit.PublishStatus == "Eligible")
            {
                publishBtnValue = "פרסם";
                isPublish = false;

            }
            else
            {
                publishBtnValue = "פרסם";
                isPublish = true;

            }

        }

        else
        {
            string error = userRes.Content.ReadAsStringAsync().Result;

            switch (error)
            {
                case "No Session":
                    msg = "Session error, please reload page";
                    break;

                case "User Not Logged In":
                    msg = "You are not logged in, please reload page to try again";
                    break;

                case "It's Not Your Game":
                    msg = "You tried to update a game that is not associated with your user ";
                    break;
            }
        }
    }

    protected async Task AddMatch(MatchToUpdate newMatchForIdentify)
    {
        if (editMatch.ID > 0) // EDIT MATCH
        {
            newMatchForIdentify.GameID = newGameID;

            var UpdatedMatch = await Http.PostAsJsonAsync("api/Matches/" + UserId + "/EditMatch", newMatchForIdentify);

            if (UpdatedMatch.IsSuccessStatusCode)
            {
                MatchToUpdate match1 = UpdatedMatch.Content.ReadFromJsonAsync<MatchToUpdate>().Result;

                editMatch.FirstMatch = match1.FirstMatch;
                editMatch.SecondMatch = match1.SecondMatch;

                foreach (MatchToShow updatedMatch1 in fullGame.MatchesList)
                {
                    if (updatedMatch1.ID == editMatch.ID)
                    {
                        int index = fullGame.MatchesList.IndexOf(updatedMatch1);
                        fullGame.MatchesList[index].ID = editMatch.ID;
                        fullGame.MatchesList[index].FirstMatch = editMatch.FirstMatch;
                        fullGame.MatchesList[index].SecondMatch = editMatch.SecondMatch;

                    }
                }

                currentMatchToShow = new MatchToUpdate();
                editMatch = new MatchToEdit();
                newMatch = new MatchToUpdate();
                myFileImage1 = "";
                myFileImage2 = "";
                isEditMode = true;
                await AreConditionsMet();

            }
            else
            {
                string error = UpdatedMatch.Content.ReadAsStringAsync().Result;

                switch (error)
                {
                    case "No Session":
                        msg = "Session error, please reload page";
                        break;

                    case "User Not Logged In":
                        msg = "You are not logged in, please reload page to try again";
                        break;

                    case "update match faild":
                        msg = "update match faild";
                        break;
                }
            }
        }
        else // NEW MATCH
        {
            newMatchForIdentify.GameID = newGameID;

            var AddMatch = await Http.PostAsJsonAsync("api/Matches/" + UserId + "/AddMatch", newMatchForIdentify);

            if (AddMatch.IsSuccessStatusCode)
            {
                MatchToShow match1 = AddMatch.Content.ReadFromJsonAsync<MatchToShow>().Result;
                fullGame.MatchesList.Add(match1);
                currentMatchToShow = new MatchToUpdate();
                newMatch = new MatchToUpdate();
                myFileImage1 = "";
                myFileImage2 = "";
                await AreConditionsMet();
            }

            else
            {
                string error = AddMatch.Content.ReadAsStringAsync().Result;

                switch (error)
                {
                    case "No Session":
                        msg = "Session error, please reload page";
                        break;

                    case "User Not Logged In":
                        msg = "You are not logged in, please reload page to try again";
                        break;

                    case "User Not Found":
                        msg = "You tried to update a game that is not associated with your user ";
                        break;

                    case "Game not created":
                        msg = "The game you have tried to create, faild.";
                        break;
                }
            }
        }
    }

    void publishBtnDisplay(string status)
    {
        if (status == "Published")
        {
            publishBtnValue = "פורסם";
            isPublish = true;
        }
        else if (status == "Eligible")
        {
            publishBtnValue = "פרסם";
            isPublish = false;
        }
        else
        {
            publishBtnValue = "פרסם";
            isPublish = true;
        }
    }
    protected override async Task OnInitializedAsync()
    {
        characterCountGameName = GameFullName.Length;


        var ShowGameRes = await Http.GetAsync("api/Games/" + UserId + "/FullGameToEdit/" + newGameID);

        if (ShowGameRes.IsSuccessStatusCode)
        {
            fullGame = ShowGameRes.Content.ReadFromJsonAsync<GameToShow>().Result;
            GameInstruction = fullGame.GameInstruction;

            publishBtnDisplay(fullGame.PublishStatus);
            if (!string.IsNullOrEmpty(fullGame.GameInstruction))
            {
                isNameAndInstructionExist = true;
                characterCountInstruction = GameInstruction.Length;


            }

            await AreConditionsMet();

        }
        else
        {
            string error = ShowGameRes.Content.ReadAsStringAsync().Result;

            switch (error)
            {
                case "No Session":
                    msg = "Session error, please reload page";
                    break;

                case "User Not Logged In":
                    msg = "You are not logged in, please reload page to try again";
                    break;

                case "Game not found":
                    msg = "Game not found ";
                    break;
            }
        }
    }


    private async Task UploadFile(InputFileChangeEventArgs e, bool isFirstImg)
    {
        var imageFiles = e.GetMultipleFiles();
        var file1 = e.File;

        if (!IsFileAccepted(file1))
        {
            unacceptedImg = "התמונה שבחרת לא בפורמט נתמך. יש לבחור תמונה בפורמט PNG או JPEG";
            return;
        }

        foreach (var file in imageFiles)
        {
            if (file.Size <= maxFileSize)
            {
                var buffer = new byte[file.Size];
                await file.OpenReadStream(maxFileSize).ReadAsync(buffer);
                var imageBase64 = Convert.ToBase64String(buffer);
                var saveResponse = await Http.PostAsJsonAsync("api/Media/upload", imageBase64);

                if (saveResponse.IsSuccessStatusCode)
                {
                    string resizeUrl = saveResponse.Content.ReadAsStringAsync().Result;

                    if (isFirstImg)
                    {
                        myFileImage1 = "uploadedFiles/" + resizeUrl;
                    }
                    else
                    {
                        myFileImage2 = "uploadedFiles/" + resizeUrl;

                    }
                    @*myFileImage = "uploadedFiles/" + resizeUrl;*@
                }
            }
            else
            {
                msg = "לא ניתן להעלות את התמונה- היא גדולה מדיי";
            }
        }
    }

    private bool IsFileAccepted(IBrowserFile fileExepted)
    {
        // Perform client-side validation by checking the file type
        return fileExepted.ContentType == "image/png" || fileExepted.ContentType == "image/jpeg";
    }

    List<string> DeletedImages = new List<string>();

    private void MakeDeleteList() // הוספת שם התמונה לרשימת התמונות הכוללת המועמדת למחיקה- לא מחיקה בפועל מהדאטה בייס
    {
        DeletedImages.Add(myFileImage);
        myFileImage = "";
    }

    private async Task DeleteImage()
    {
        var saveResponse = await Http.PostAsJsonAsync("api/Media/deleteImages", DeletedImages);

        if (saveResponse.IsSuccessStatusCode == true)
        {
            msg = "התמונות נמחקו בהצלחה";
            DeletedImages.Clear();
        }
        else
        {
            msg = "בעיה במחיקה ";
        }
    }


    protected async Task updateNameAndInstruction(gameInsrtuctionToInsert gameInsrtucToInsert)
    {
        gameInsrtucToInsert.ID = newGameID;
        gameInsrtucToInsert.GameFullName = GameFullName;
        gameInsrtucToInsert.GameInstruction = GameInstruction;

        var userRes = await Http.PostAsJsonAsync("api/Matches/" + UserId + "/addInstruction", gameInsrtucToInsert);

        if (userRes.IsSuccessStatusCode)
        {
            //משתנה שיפעיל אנימציה של וי
            SettingMsg = "קולולולו";
            isNameAndInstructionExist = true;
            await AreConditionsMet();
        }

        else
        {
            string error = userRes.Content.ReadAsStringAsync().Result;

            switch (error)
            {
                case "No Session":
                    SettingMsg = "Session error, please reload page";
                    break;

                case "User Not Logged In":
                    SettingMsg = "You are not logged in, please reload page to try again";
                    break;

                case "It's Not Your Game":
                    SettingMsg = "You tried to update a game that is not associated with your user ";
                    break;

                case "update Game Instruction failed":
                    SettingMsg = " update Game Instruction failed";
                    break;

                case "update game name failed":
                    SettingMsg = " update game name failed";
                    break;
            }
        }
    }

    void deleteButtonClicked(MatchToShow m)
    {
        matchToDelete = m;
        isDeleteButtonClicked = true;
    }

    protected async Task DeleteMatchRow(MatchToShow matchRowToDelete)
    {
        matchRowToDelete = matchToDelete;
        var deleteMatchResponse = await Http.DeleteAsync("api/Matches/" + UserId + "/DeleteMatch" + "/" + matchRowToDelete.ID);
        if (deleteMatchResponse.IsSuccessStatusCode)
        {
            fullGame.MatchesList.Remove(matchRowToDelete);
            isDeleteButtonClicked = false;
            await AreConditionsMet();
        }

        else
        {
            string error = deleteMatchResponse.Content.ReadAsStringAsync().Result;

            switch (error)
            {
                case "No Session":
                    msg = "Session error, please reload page";
                    break;

                case "User Not Logged In":
                    msg = "You are not logged in, please reload page to try again";
                    break;

                case "Failed to delete match":
                    msg = "Failed to delete match";
                    break;
            }
        }
    }

    protected async Task EditMatchRow(int matchIdToEdit)
    {
        editAvailable = true;
        isEditMode = false;

        var editMatchResponse = await Http.GetAsync("api/Matches/" + UserId + "/TempEdit" + "/" + matchIdToEdit);
        if (editMatchResponse.IsSuccessStatusCode)
        {
            editMatch = editMatchResponse.Content.ReadFromJsonAsync<MatchToEdit>().Result;
            currentMatchToShow.ID = editMatch.ID;
            currentMatchToShow.FirstMatch = editMatch.FirstMatch;
            currentMatchToShow.FirstIsText = editMatch.FirstIsText;
            currentMatchToShow.SecondMatch = editMatch.SecondMatch;
            currentMatchToShow.SecondIsText = editMatch.SecondIsText;
            if (!editMatch.FirstIsText)
            {
                textChanged = true;
                myFileImage1 = currentMatchToShow.FirstMatch;

            }
            else
            {
                textChanged = false;
            }

            if (!editMatch.SecondIsText)
            {
                text2Changed = false;
                myFileImage2 = currentMatchToShow.SecondMatch;

            }
            else
            {
                text2Changed = true;
            }
            //textChanged = editMatch.FirstIsText;
            //text2Changed = !editMatch.SecondIsText;
        }

        else
        {
            string error = editMatchResponse.Content.ReadAsStringAsync().Result;

            switch (error)
            {
                case "No Session":
                    msg = "Session error, please reload page";
                    break;

                case "User Not Logged In":
                    msg = "You are not logged in, please reload page to try again";
                    break;

                case "Pulling match Failed":
                    msg = "Failed to pull match";
                    break;
            }
        }
    }

    protected async Task returnToHome()
    {
        GameToUpdate gameToReturn1 = new GameToUpdate();
        gameToReturn1.ID = fullGame.ID;
        gameToReturn1.GameFullName = GameFullName;
        gameToReturn1.PublishStatus = fullGame.PublishStatus;
        gameToReturn1.GameInstruction = GameInstruction;


        var userResRETURN = await Http.PostAsJsonAsync("api/Games/" + UserId + "/EditGame", gameToReturn1);

        if (userResRETURN.IsSuccessStatusCode)
        {
            //משתנה שיפעיל אנימציה של וי
            SettingMsg = "dfklmhdgjnfgsdlkf";
            if (string.IsNullOrEmpty(fullGame.GameInstruction))
            {
                isInsExist = true;
            }
            nav.NavigateTo("./GamesList/" + isInsExist);

        }

        else
        {
            string error = userResRETURN.Content.ReadAsStringAsync().Result;

            switch (error)
            {
                case "No Session":
                    SettingMsg = "Session error, please reload page";
                    break;

                case "User Not Logged In":
                    SettingMsg = "You are not logged in, please reload page to try again";
                    break;

                case "update game faild":
                    SettingMsg = "You tried to update a game that is not associated with your user ";
                    break;


            }
        }
    }

    void HandleInput(ChangeEventArgs e, string field)
    {
        var inputText = (string)e.Value;

        if (field == "first")
        {
            currentMatchToShow.FirstMatch = inputText;
            characterCountFirst = currentMatchToShow.FirstMatch.Length;
        }
        else if (field == "second")
        {
            currentMatchToShow.SecondMatch = inputText;
            characterCountSecond = currentMatchToShow.SecondMatch.Length;
        }
        else if (field == "gameName")
        {
            GameFullName = inputText;
            characterCountGameName = GameFullName.Length;
        }
        else if (field == "gameInstruction")
        {
            GameInstruction = inputText;
            characterCountInstruction = GameInstruction.Length;
            if (string.IsNullOrEmpty(inputText) && !string.IsNullOrEmpty(previousValue))
            {
                showWarningMessage = true;
            }
            else
            {
                showWarningMessage = false;
            }
            previousValue = inputText;
        }
    }
}