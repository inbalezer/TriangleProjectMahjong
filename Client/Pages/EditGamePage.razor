@page "/EditGamePage/{GameFullName}/{newGameID:int}/{updateMode:bool}"
@using TriangleProject.Shared.Models.Editor
@using TriangleProject.Shared.Models.Matches
@using TriangleProject.Shared.Models.Portelem

@inject HttpClient Http
@inject NavigationManager Nav

<h3>EditGamePage</h3>


<table style="border:double">
    <tr>
        <th>"הגדרות כלליות"</th>
    </tr>
    <tr>
        :שם המשחק
        <input style="border:2px solid blue" type="text" @bind="GameFullName" />
    </tr>
    <tr>
        :הנחיית משחק לחצו והתאימו בין
        <input style="border:2px solid blue" type="text" @bind="fullGame.GameInstruction" /> ורוקנו את הלוח
    </tr>


</table>

@*<input type="button" value="שמור" @onclick=Navigate />*@

<MudButton value="שמור" @onclick="(() => updateNameAndInstruction(gameWithInstruction))" Color="Color.Primary"> +שמור </MudButton>


<table style="border:double">
    <tr>
        <th>הוספת זוגות</th>
    </tr>
    <tr>
        :התאמה ראשונה
        <input type="text" @bind="newMatch.FirstMatch" />
        @*<input type="checkbox" @onchange="(()=> isText($event.target.checked)) />

            <input type="checkbox" @onchange="(()=> "isText($event.target.checked)" />*@

    </tr>
    <tr>
        :התאמה שניה
        <input type="text" @bind="newMatch.SecondMatch" /> ורוקנו את הלוח
    </tr>

    @*    <input type="button" @onclick="(() =>AddMatch(UserId,newMatch))" />
    *@
</table>

@if (allMatches != null)
{
    <ul>
        @foreach (MatchToUpdate match in allMatches)
        {
            <li>
                @match.FirstMatch
            </li>

            <li>
                @match.SecondMatch
            </li>
        }
    </ul>
}


@if (msg != "")
{
    <p>@msg</p>
    <input type="button" value="reload" @onclick=Navigate />
}


<label for="FileInֵputID"> בחר תמונה </label>
<InputFile id="FileInputID" OnChange="UploadFile" hidden />
<br />

@if (myFileImage != "")
{
    <img src="@myFileImage" width="150" />
}


@if (myFileImage != "")
{
    <img src="@myFileImage" width="150" />
    <input type="button" value="העבר למחיקה " @onclick="MakeDeleteList" />
}


@if (DeletedImages.Count > 0)
{
    <ul>
        @foreach (string img in DeletedImages)
        {

            <li>@img     <img src="@img" width="50" /> </li>
        }
    </ul>

    <input type="button" value="מחק תמונות נבחרות " @onclick="DeleteImage" />
}

@if (SettingMsg != "")
{
    <p>@SettingMsg</p>
}

<p>@msg</p>

@if (fullGameMsg != "")
{
    <p>@fullGameMsg</p>
}

@if (updateMode)
{
    showFullGame(UserId,newGameID);
}

@code {
    [CascadingParameter]
    public int UserId { get; set; }
    string msg = "";
    string SettingMsg = "";
    string fullGameMsg = "";
    bool FirstIsText;
    bool SecondIsText;



    [Parameter]
    public string GameFullName { get; set; }

    [Parameter]
    public int newGameID { get; set; }

    [Parameter]
    public bool updateMode { get; set; }

    //MatchToUpdate newMatch;
    //List<MatchToUpdate> allMatches;

    MatchToUpdate newMatch = new MatchToUpdate();
    gameInsrtuctionToInsert gameWithInstruction = new gameInsrtuctionToInsert();
    GameToShow fullGame = new GameToShow();
    List<MatchToUpdate> allMatches = new List<MatchToUpdate>();


    string GameInstruction = "";
    void Navigate()
    {
        Nav.NavigateTo("./", true);
    }

    //protected async Task AddMatch(int UserId, MatchToUpdate newMatch)
    //{
    //    var AddResopnse = await Http.GetAsync("api/Matches/" + UserId + "/AddMatch/" + newMatch);

    //    if (AddResopnse.IsSuccessStatusCode)
    //    {
    //        MatchToUpdate match = AddResopnse.Content.ReadFromJsonAsync<MatchToUpdate>().Result;
    //        allMatches.Add(match);

    //    }
    //    else
    //    {
    //        string error = AddResopnse.Content.ReadAsStringAsync().Result;

    //        switch (error)
    //        {
    //            case "No Session":
    //                msg = "Session error, please reload page";
    //                break;

    //            case "User Not Logged In":
    //                msg = "You are not logged in, please reload page to try again";
    //                break;

    //            case "User Not Found":
    //                msg = "You tried to update a game that is not associated with your user ";
    //                break;

    //            case "Game not created":
    //                msg = "The game you have tried to create, faild.";
    //                break;
    //        }
    //    }
    //}


    string myFileImage = "";
    long maxFileSize = 4194304;

    private async Task UploadFile(InputFileChangeEventArgs e)
    {
        var imageFiles = e.GetMultipleFiles();
        foreach (var file in imageFiles)
        {
            if (file.Size <= maxFileSize)
            {
                var buffer = new byte[file.Size];
                await file.OpenReadStream(maxFileSize).ReadAsync(buffer);
                var imageBase64 = Convert.ToBase64String(buffer);
                var saveResponse = await Http.PostAsJsonAsync("api/Media/upload", imageBase64);

                if (saveResponse.IsSuccessStatusCode == true)
                {
                    string resizeUrl = saveResponse.Content.ReadAsStringAsync().Result;

                    myFileImage = "uploadedFiles/" + resizeUrl;
                }
            }
            else
            {
                msg = "לא ניתן להעלות את התמונה- היא גדולה מדיי";
            }
        }
    }

    List<string> DeletedImages = new List<string>();

    private void MakeDeleteList() // הוספת שם התמונה לרשימת התמונות הכוללת המועמדת למחיקה- לא מחיקה בפועל מהדאטה בייס
    {
        DeletedImages.Add(myFileImage);
        myFileImage = "";
    }

    private async Task DeleteImage()
    {
        var saveResponse = await Http.PostAsJsonAsync("api/Media/deleteImages", DeletedImages);

        if (saveResponse.IsSuccessStatusCode == true)
        {
            msg = "התמונות נמחקו בהצלחה";
            DeletedImages.Clear();
        }
        else
        {
            msg = "בעיה במחיקה ";
        }
    }


    protected async Task updateNameAndInstruction(gameInsrtuctionToInsert gameInsrtucToInsert)
    {
        gameInsrtucToInsert.ID = newGameID;
        gameInsrtucToInsert.GameFullName = GameFullName;
        gameInsrtucToInsert.GameInstruction = GameInstruction;

        var userRes = await Http.PostAsJsonAsync("api/Matches/" + UserId + "/addInstruction", gameInsrtucToInsert);

        if (userRes.IsSuccessStatusCode)
        {
            //משתנה שיפעיל אנימציה של וי 
            SettingMsg = "קולולולו";
        }

        else
        {
            string error = userRes.Content.ReadAsStringAsync().Result;

            switch (error)
            {
                case "No Session":
                    SettingMsg = "Session error, please reload page";
                    break;

                case "User Not Logged In":
                    SettingMsg = "You are not logged in, please reload page to try again";
                    break;

                case "It's Not Your Game":
                    SettingMsg = "You tried to update a game that is not associated with your user ";
                    break;

                case "update Game Instruction failed":
                    SettingMsg = " update Game Instruction failed";
                    break;

                case "update game name failed":
                    SettingMsg = " update game name failed";
                    break;
            }
        }

    }

    protected async Task showFullGame(int UserId, int newGameID)
    {
        var ShowGameRes = await Http.GetAsync("api/Matches/" + UserId + "/FullGameToEdit/" + newGameID);

        if (ShowGameRes.IsSuccessStatusCode)
        {

            GameToShow gameFromDb = ShowGameRes.Content.ReadFromJsonAsync<GameToShow>().Result;
            fullGame = gameFromDb;
            
        }
        else
        {
            string error = ShowGameRes.Content.ReadAsStringAsync().Result;

            switch (error)
            {
                case "No Session":
                    msg = "Session error, please reload page";
                    break;

                case "User Not Logged In":
                    msg = "You are not logged in, please reload page to try again";
                    break;

                case "Game not found":
                    msg = "Game not found ";
                    break;
            }
        }
    }
}

